#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_Commonfunctions
#TestCase ID    :
#Description    :
#Author         : Arya L
#Date           : 14 March 2018, 22 March 2018
#Script Version : 2.0
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr, sys, os, time, datetime
clr.AddReference("ScriptingLibrary")
import ScriptingLibrary
dut = ScriptingLibrary.DUT()
logger = ScriptingLibrary.Logger()
chkpt = ScriptingLibrary.CheckPoint()
testResult = ScriptingLibrary.TestResult()
args = sys.argv
scriptPath = os.path.realpath(__file__)
remoteFiringType = "IR"
dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType)
logger.Configure(args[1],args[2],args[3],args[4],scriptPath)

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''

#importing user defined modules
sys.path.append('../')
try:
    from configuration.config import homeKey, screenKeyRegionMapping
except ImportError:
    logger.Log("Failed to import config file")
    sys.exit()

try:
    from configuration.constants import DEFAULT_KEY_FIRE_TIME_OUT
except ImportError:
    logger.Log("Failed to import constants file")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions
testStatus = True

#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: preCondition()
#@Description		: Function to press the home Key
#@Input arguments	: Null
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def preCondition():
    dut.controller.sendCommand(homeKey)


#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: strtomillisecond()
#@Description		: Function to convert the time to miliseconds
#@Input arguments	: timeinstr- timestamp to be coverted to milliseconds
#@Output values		: miliseconds- time in milliseconds
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def strtomillisecond(timeinstr):
    hours, minutes, seconds = (["0", "0"] + timeinstr.split(":"))[-3:]
    hours = int(hours)
    minutes = int(minutes)
    seconds = float(seconds)
    miliseconds = int(3600000 * hours + 60000 * minutes + 1000 * seconds)
    return miliseconds


#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: getTimestamp()
#@Description		: Function to get the current time in ("%H:%M:%S.%f")
#@Input arguments	: Null
#@Output values		: miliseconds- time in milliseconds
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def getTimestamp():
    timestamp = datetime.datetime.now().strftime("%H:%M:%S.%f")
    return strtomillisecond(timestamp)


#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: getTimestamp()
#@Description		: Takes initial and final times in milliseconds and finds
#the difference as duration
#@Input arguments	: t1, t2- nitial and final times in milliseconds
#@Output values		: duration in miliseconds
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def getAPIduration(t1, t2):
    duration = round(((t2 - t1) / 1000.0), 3)
    logger.Log("Duration calculated: "+str(duration))
    return duration


#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: UpdateTestCaseResult()
#@Description		: compares observed and expected and update the test case status
#@Input arguments	: status- API return status, observed- behavior, expected-behavior
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def UpdateTestCaseResult(status, observed, expected):
    try:
        global testStatus
        if status:
            logger.Log("API Passed")
        else:
            logger.Log("API Failed")
        dut.CommitStepResult("Expected : "+expected, "Observed:" + observed)
        if observed == expected:
            dut.CommitStepResult("TestCaseResult  : ","PASSED")
        else:
            testStatus = False
            dut.CommitStepResult("TestCaseResult  : ","FAILED")
        logger.Log("******************TEST CASE END *******************************")
    except Exception as e:
         logger.Warn("Exception raised in UpdateTestCaseResult function.")
         logger.Error("Exception thrown by python : " + str(e))


#def UpdateTestCaseResult(status, observed, expected):
#    global testStatus
#    dut.CommitStepResult("Expected : "+expected,"Observed:" + observed)
#    if status and observed == expected:
#        dut.CommitStepResult("TestCaseResult  : ","PASSED")
#    else:
#        testStatus = False
#        dut.CommitStepResult("TestCaseResult  : ","FAILED")
#    logger.Log("******************TEST CASE END *****************************")


#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: UpdateTestScriptResult()
#@Description		: Updates script status, pass if all th testcase results are true
#@Input arguments	: Null
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def UpdateTestScriptResult():
    try:
        if testStatus:
            dut.CommitStepResult("API: ", "Passed")
            dut.CommitTestResult("PASSED")
        else:
            dut.CommitStepResult("API: ", "Failed")
            dut.CommitTestResult("FAILED")
    except Exception as e:
         logger.Warn("Exception raised in UpdateTestScriptResult function.")
         logger.Error("Exception thrown by python : " + str(e))


#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: reachCheckpointScreen()
#@Description		: To reach the particular screen based on the checkpoint name
#@Input arguments	: checkpointName
#@Output values		: Returns the list of co ordinates
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def reachScreen(screenName, CoOrdinate = False):
    try:
        screenList = screenKeyRegionMapping[screenName]
        for i in screenList[0]:
            dut.controller.sendCommand(i)
            time.sleep(DEFAULT_KEY_FIRE_TIME_OUT)
        #screenList = screenKeyRegionMapping[screenName]
        #logger.Log(str(screenList[0]))
        #dut.controller.sendCommandSequence(screenList[0], DEFAULT_KEY_FIRE_TIME_OUT)
        if CoOrdinate:
            return screenList[1:]
    except Exception as e:
         logger.Warn("Exception raised in UpdateTestScriptResult function.")
         logger.Error("Exception thrown by python : " + str(e))
