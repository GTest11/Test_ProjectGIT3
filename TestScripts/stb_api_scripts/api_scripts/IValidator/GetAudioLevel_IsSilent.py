#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_05_11
#Description    : Validation of GetAudioLevel and IsSilent
#API Description:
#GetAudioLevel : Returns current audio level of video in dut
#IsSilent : Check whether the box is Silent ( no audio ) for a specified duration
#Author         : Arya L
#Date           : 14 March 2018, 22 March 2018, 16 April 2018, 21 June 2018
#Script Version : 3.0
#Note           : Before testing muteKey needs to update in config file
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import sys, time

#importing user defined modules
sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.config import SkyMuteKey, SkyVolumeUpkey, getAudioLevelIsSilentTestCaseCount,\
    getAudioLevelIsSilentInputDict
except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''
#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
# Use defined variables and functions
inputDict = getAudioLevelIsSilentInputDict

APIname = "GetAudioLevel and IsSilent"
testCaseMax= getAudioLevelIsSilentTestCaseCount
exceptionOccured = False

#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the IsSilent API with diffrent parameters and logs
# its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        noiseLevel = inputDict[i][2]
        duration = inputDict[i][3]

        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)



        time1 = comLib.getTimestamp()
        audioLevel = comLib.dut.validator.GetAudioLevel()
        time2 = comLib.getTimestamp()
        APIdurationGetAudioLevel = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "Audio level obtained:  " +str (audioLevel))
        comLib.logger.Log( "Time taken by the GetAudioLevel to return:  " +
        str (APIdurationGetAudioLevel))
        comLib.dut.CommitStepResult("API duration:GetAudioLevel ",
        str(APIdurationGetAudioLevel))


        # mute the device and get the audio level
        comLib.dut.controller.sendCommand(SkyMuteKey)
        SilentLevel = comLib.dut.validator.GetAudioLevel()
        comLib.logger.Log("silent value:" + str(SilentLevel))
        # make the threshold value slightly greater than the SilentLevel
        threshold  = SilentLevel + 5
        duration = "00:00:50"
        # Unmute the device and perform the actions
        comLib.dut.controller.sendCommand(SkyVolumeUpkey)
        time.sleep(5)
        # Check whether the device is in silent condition or not
        #API call and duration calculation

        #Logging input parameters
        comLib.logger.Log( " ********** Input details ********** ")
        comLib.logger.Log("noiseLevel: " + str(noiseLevel))
        comLib.logger.Log("duration: " + str(duration))

        time1 = comLib.getTimestamp()
        APIstatus = comLib.dut.validator.IsSilent(threshold, duration)
        time2 = comLib.getTimestamp()
        APIduration = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "Time taken by IsSilent to return:  " +str (APIduration))
        comLib.dut.CommitStepResult("API: duration:IsSilent ", str(APIduration))

        #Updating test case status
        if APIstatus:
            comLib.logger.Log("Silence detected")
            observed = API_PASS
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")
            comLib.UpdateTestCaseResult(True, observed, expected)
        else:
            observed = API_FAIL
            comLib.logger.Log("Noise detected")
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")
            comLib.UpdateTestCaseResult(False, observed, expected)
    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        comLib.dut.validator.QuickCapture("quickCapimage_Initial")
        # Logging basic test informations
        comLib.logger.Log("################## API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        #executing precondition, making the box awake by home key press
        comLib.preCondition()

        #executing test cases
        comLib.dut.validator.QuickCapture("quickCapimage_BeforeAPIcall")
        for i in range( testCaseMax ):
            TestAPI(i)
        comLib.dut.validator.QuickCapture("quickCapimage_AfterAPIcall")

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         global exceptionOccured
         exceptionOccured = True
    finally:
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END #################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
