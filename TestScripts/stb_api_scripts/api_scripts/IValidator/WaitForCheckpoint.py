#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_18
#Description    : Validation of WaitForCheckpoint
#API Description: Validates checkpoint for a specific amount of time.
# Used with StartCaptureZapFrames and StopCaptureZapFrames for validating captured frames.
# WaitForCheckpoint("TestCheckpoint", 30, 10) will validate the checkpoint
#"TestCheckpoint" against the captured frames for 30 seconds.
#Test descriptio:
#Author         : Arya L
#Date           : 20 March 2018, 23 March 2018,16 April 2018, 21 June 2018
#Script Version : 3.0
#Script modified for Sky box (testing_rack, slot 5)
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import sys, time

#importing user defined modules
sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL, START_CAPTURE_ZAP_TIME
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.config import CheckpointScreenToWait, homeKey, \
    waitForCheckpointTestCaseCount, waitForCheckpointInputDict
except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions
inputDict = waitForCheckpointInputDict

APIname = "WaitForCheckpoint"
testCaseMax = waitForCheckpointTestCaseCount
exceptionOccured = False

#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the WaitForCheckpoint API with diffrent parameters
# and logs its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        checkPointName = inputDict[i][2]
        timeToWait = inputDict[i][3]
        initialDelay = inputDict[i][4]


        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)

        #Logging input parameters
        comLib.logger.Log( " ********** Input details ********** ")
        comLib.logger.Log("checkPointName: " + str(checkPointName))
        comLib.logger.Log("timeToWait: " + str(timeToWait))
        comLib.logger.Log("initialDelay: " + str(initialDelay))

        #Test case 0: already in checkpoint screen
        if i == 0:
            comLib.reachScreen(CheckpointScreenToWait)

        #API call and duration calculation
        #Sometimes getting error while start capture, to avoid that first stop
        comLib.dut.validator.StopCaptureZapFrames()
        if(comLib.dut.validator.StartCaptureZapFrames(START_CAPTURE_ZAP_TIME)):
            #testcase1: No screen transition to the checkpoint screen
            if i > 1:
                comLib.reachScreen(CheckpointScreenToWait)
                time.sleep(1)

            time1 = comLib.getTimestamp()
            transitionTime = comLib.dut.validator.WaitForCheckpoint(checkPointName, timeToWait, initialDelay)
            time2 = comLib.getTimestamp()
            #comLib.logger.Log("Checkpoint find in:" + str(transitionTime))
            APIduration = comLib.getAPIduration(time1, time2)
            comLib.logger.Log( "Time taken by the API to return:  " +str (APIduration))
            comLib.dut.CommitStepResult("API: duration ", str(APIduration))

            #Moving to a screen without expected checkpoint
            if i == 0:
                comLib.dut.controller.sendCommand(homeKey)

            if APIduration > timeToWait + 1:
                comLib.logger.Log("API took more than expected time to return.")
        #Updating test case status
            if(transitionTime > 0 and APIduration < timeToWait + 1):
                comLib.logger.Log("Checkpoint reached in :" + str(transitionTime))
                comLib.logger.Log("API passed")
                observed = API_PASS
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")
                comLib.UpdateTestCaseResult(True, observed, expected)
            else:
                observed = API_FAIL
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")     
                comLib.UpdateTestCaseResult(False, observed, expected)
                comLib.logger.Log("API failed")

            comLib.dut.validator.StopCaptureZapFrames()
        else:
            observed = "error"
            comLib.UpdateTestCaseResult(False, observed, expected)
            comLib.logger.Log("Unable to start frame capture")

    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        comLib.dut.validator.QuickCapture("quickCapimage_Initial")
        # Logging basic test informations
        comLib.logger.Log("################## API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        #executing precondition, making the box awake by home key press
        comLib.preCondition()

        #executing test caases
        comLib.dut.validator.QuickCapture("quickCapimage_BeforeAPIcall")
        for i in range( testCaseMax ):
            TestAPI(i)
        comLib.dut.validator.QuickCapture("quickCapimage_AfterAPIcall")

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         global exceptionOccured
         exceptionOccured = True

    finally:
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()

        comLib.logger.Log("############# TEST SCRIPT END #################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
