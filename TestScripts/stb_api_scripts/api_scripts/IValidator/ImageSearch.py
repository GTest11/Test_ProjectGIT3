#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_10
#Description    : Validation of ImageSearch
#API Description: This API takes the region of interest specified in the
#given checkpoint as a search pattern and searches for the patten in the region
# specified by x, y, width and height.
#Test description:
#Author         : Arya L
#Date           : 16 March 2018, 16 April 2018, 17 April 2018, 21 June 2018
#Script Version : 3.0
#Note : Execute in Roku box
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import sys

#importing user defined modules
sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    #comLib.logger.Log("Failed to import commonFunctions file")
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

#try:
#    from configuration.coOrdinates import *

#except ImportError:
#    comLib.logger.Warn("Failed to import coOrdinates file")
#    sys.exit()


try:
    from configuration.config import imageSearchSingleOccurance, imageSearchTestCaseCount, imageSearchInputDict

except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# User defined variables and functions
inputDict = imageSearchInputDict

APIname = "ImageSearch"
testCaseMax= imageSearchTestCaseCount
exceptionOccured = False


#inputDict = {key:[testScenario, expected, checkpointName, regionX, regionY, regionWidth, regionHeight, algorithm, percentMatchThreshold ] }

#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the ImageSearch API with diffrent parameters and logs its response (status, duration)
#@Input arguments	: Test case count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        checkpointName = inputDict[i][2]
        regionX = inputDict[i][3]
        regionY = inputDict[i][4]
        regionWidth = inputDict[i][5]
        regionHeight = inputDict[i][6]
        algorithm = inputDict[i][7]
        percentMatchThreshold = inputDict[i][8]

        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)

        #Logging input parameters
        comLib.logger.Log( " ********** Input details ********** ")
        comLib.logger.Log("checkpointName: " + str(checkpointName))
        comLib.logger.Log("regionX: " + str(regionX))
        comLib.logger.Log("regionY: " + str(regionY))
        comLib.logger.Log("regionWidth: " + str(regionWidth))
        comLib.logger.Log("regionHeight: " + str(regionHeight))
        comLib.logger.Log("algorithm: " + str(algorithm))
        comLib.logger.Log("percentMatchThreshold: " + str(percentMatchThreshold))

        comLib.reachScreen(imageSearchSingleOccurance)
        #API call and duration calculation
        time1 = comLib.getTimestamp()
        APIresponse = comLib.dut.validator.ImageSearch(checkpointName, regionX, regionY, regionWidth, regionHeight, algorithm, percentMatchThreshold)
        time2 = comLib.getTimestamp()
        APIduration = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "Time taken by the API to return:  " +str (APIduration))
        comLib.dut.CommitStepResult("API: duration ", str(APIduration))

        #Updating test case status
        if getattr(APIresponse,'OpStatus'):
            comLib.logger.Log("Match percentage is: "+str(getattr(APIresponse,'MatchPercentage')))
            comLib.logger.Log("MatchRegion is:"+str(getattr(APIresponse,'MatchRegion')))
            comLib.logger.Log("API Remarks: "+str(getattr(APIresponse,'Remarks')))
            observed = API_PASS
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")
            comLib.UpdateTestCaseResult(True, observed, expected)
        else:
            comLib.logger.Log("API Remarks: "+str(getattr(APIresponse,'Remarks')))
            observed = API_FAIL
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")
            comLib.UpdateTestCaseResult(False, observed, expected)
    except Exception as e:
         comLib.logger.Error ("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        comLib.dut.validator.QuickCapture("quickCapimage_Initial")
        # Logging basic test information
        comLib.logger.Log("################## API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        #executing precondition, making the box awake by home key press
        comLib.preCondition()

        #executing test cases
        comLib.dut.validator.QuickCapture("quickCapimage_BeforeAPIvalidation")
        for i in range( testCaseMax ):
            TestAPI(i)
        comLib.dut.validator.QuickCapture("quickCapimage_AfterAPIvalidation")

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error ("Exception thrown by python : " + str(e))
         global exceptionOccured
         exceptionOccured = True
         #comLib.UpdateTestCaseResult(False, observed, )

         #if i < testCaseMax:
             #TestAPI()
    finally:
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END #########################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
