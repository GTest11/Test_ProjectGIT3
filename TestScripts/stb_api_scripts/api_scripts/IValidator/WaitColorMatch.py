#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_10
#Description    : Validation of WaitColorMatch
#API Description: This API takes the region of interest specified in the
#given checkpoint as a search pattern and searches for the patten in the region
# specified by x, y, width and height.
#Test description:
#Author         : Arya L
#Date           : 21 March 2018, 16 April 2018, 19 April 2018, 21 June 2018
#Script Version : 3.0
#Note           : Run the script in roku box
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import sys

#importing user defined modules

sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib

except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL, DEFAULT_KEY_FIRE_TIME_OUT, START_CAPTURE_ZAP_TIME
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.config import waitColorMatchInputDict, waitColorMatchTestCaseCount
except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions
inputDict = waitColorMatchInputDict

APIname = "WaitColorMatch"
testCaseMax = waitColorMatchTestCaseCount
exceptionOccured = False


#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the WaitColorMatch API with diffrent parameters and logs
#its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        #Victoria NOWTV logo, yellow color (Home -> Down->Down)
        #matchColor = "[93,188,210]"
        matchColor = "[254,196,0]"

        x_coordinate = inputDict[i][2]
        y_coordinate = inputDict[i][3]
        width = inputDict[i][4]
        height = inputDict[i][5]
        timeToWait = inputDict[i][6]
        waitGap = inputDict[i][7]
        colorTolerance = inputDict[i][8]

        #InValid parameters, Match color as string -  '[abcd]'
        if  i == 5:
            matchColor = "[abcd]"

        #InValid parameters, tolerance as string -  '[abcd]'
        if i == 6:
            colorTolerance = "[abcd]"

        flatness = inputDict[i][9]

        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)

        #Logging input parameters
        comLib.logger.Log( " ********** Input details ********** ")
        comLib.logger.Log("matchColor: " + str(matchColor))
        comLib.logger.Log("x_coordinate: " + str(x_coordinate))
        comLib.logger.Log("y_coordinate: " + str(y_coordinate))
        comLib.logger.Log("width: " + str(width))
        comLib.logger.Log("height: " + str(height))
        comLib.logger.Log("timeToWait: " + str(timeToWait))
        comLib.logger.Log("waitGap: " + str(waitGap))
        comLib.logger.Log("colorTolerance: " + str(colorTolerance))
        comLib.logger.Log("flatness: " + str(flatness))

        #Navigating to color matching screen, only if the test case is not 4
        #(api fail condition testing)
        if i != 4:
            comLib.dut.controller.sendCommandSequence("Home,Down,Down", DEFAULT_KEY_FIRE_TIME_OUT)

        if i == 4:
         comLib.dut.controller.sendCommand("Down")

        if(comLib.dut.validator.StartCaptureZapFrames(START_CAPTURE_ZAP_TIME)):
            comLib.dut.validator.QuickCapture("quickCapimage_BeforeAPIcall")
            time1 = comLib.getTimestamp()
            APIstatus = comLib.dut.validator.WaitColorMatch(matchColor, x_coordinate, y_coordinate, width, height, timeToWait, waitGap, colorTolerance, flatness)
            time2 = comLib.getTimestamp()

            APIduration = comLib.getAPIduration(time1, time2)
            comLib.logger.Log( "Time taken by the API to return:  " +str (APIduration))
            comLib.dut.CommitStepResult("API: duration ", str(APIduration))

            if APIduration > timeToWait + 1:
                comLib.logger.Log("The API took more than expected time to return.")

            if APIstatus and APIduration <= timeToWait + 1 :
                observed = API_PASS
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")
                comLib.UpdateTestCaseResult(True, observed, expected)
            else:
                observed = API_FAIL
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")
                comLib.UpdateTestCaseResult(False, observed, expected)

            comLib.dut.validator.StopCaptureZapFrames()
        else:
            observed = "error"
            comLib.UpdateTestCaseResult(False, observed, expected)
            comLib.logger.Warn("Unable to start frame capture")

    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        comLib.dut.validator.QuickCapture("quickCapimage_Initial")
        # Logging basic test information
        comLib.logger.Log("################## API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        #executing precondition, making the box awake by home key press
        comLib.preCondition()

        #executing test cases
        comLib.dut.validator.QuickCapture("quickCapimage_BeforeAPIcall")
        for i in range( testCaseMax ):
            TestAPI(i)
        comLib.dut.validator.QuickCapture("quickCapimage_AfterAPIcall")

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         global exceptionOccured
         exceptionOccured = True
    finally:
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END #########################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
