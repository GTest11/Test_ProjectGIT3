#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_02
#Description    : Validation of CaptureImage
#API Description: Captures an image region with provided co-ordinates and returns
#it path for further usage within the test script.
#Author         : Arya L
#Date           : 12 March 2018, 22 March 2018, 16 April 2018, 21 June 2018
#Script Version : 3.0
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import sys

#importing user defined modules
sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.config import captureImageTestCaseCount, captureImageInputDict
except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL
except ImportError:
    comLib.logger.Log("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''
#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions
inputDict = captureImageInputDict

APIname = "CaptureImage"
testCaseMax= captureImageTestCaseCount
exceptionOccured = False
captureLoop = 2
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the CaptureImage API with diffrent parameters and
#logs its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]
        xCord = inputDict[i][2]
        yCord = inputDict[i][3]
        width = inputDict[i][4]
        height = inputDict[i][5]
        ImageName = inputDict[i][6]
        jpegQuality = inputDict[i][7]
        overWriteAction = inputDict[i][8]

        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)

        #Logging input parameters
        comLib.logger.Log( "Input details... ")
        comLib.logger.Log("xCord: " + str(xCord))
        comLib.logger.Log("yCord: " + str(yCord))
        comLib.logger.Log("width: " + str(width))
        comLib.logger.Log("height: " + str(height))
        comLib.logger.Log("ImageName: " + str(ImageName))
        comLib.logger.Log("jpegQuality: " + str(jpegQuality))
        comLib.logger.Log("overWriteAction: " + str(overWriteAction))

        #API call and duration calculation
        for i in range (captureLoop):
            ImageName = ImageName + str(i)
            comLib.dut.CommitStepResult("API loop ", str(i))
            time1 = comLib.getTimestamp()
            imagePath  = comLib.dut.validator.CaptureImage(xCord, yCord, width,
             height, ImageName, jpegQuality, overWriteAction)
            time2 = comLib.getTimestamp()
            APIduration = comLib.getAPIduration(time1, time2)
            comLib.logger.Log( "Time taken by the APT to return:  " +str (APIduration))
            comLib.dut.CommitStepResult("API: duration ", str(APIduration))

            comLib.logger.Log( "imagePath:  " +str (imagePath))
            #Updating test case status
            if imagePath != None and imagePath != "":
                observed = "api pass"
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")
                comLib.UpdateTestCaseResult(True, observed, expected)
            else:
                observed = "api fail"
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")
                comLib.UpdateTestCaseResult(False, observed, expected)

    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True

# ******************************************************************************
def main():
    try:
        # Logging basic test information
        comLib.logger.Log("############### API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        #executing precondition, making the box awake by home key press
        comLib.preCondition()

        #executing test cases
        for i in range( testCaseMax ):
            TestAPI(i)

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         global exceptionOccured
         exceptionOccured = True
    finally:
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("############### TEST SCRIPT END ##################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
