#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestCase ID:
#Description:
#Author:
#Date:
#Version:

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr,sys,os,time
clr.AddReference("ScriptingLibrary")
import ScriptingLibrary
dut = ScriptingLibrary.DUT()
logger = ScriptingLibrary.Logger()
chkpt = ScriptingLibrary.CheckPoint()
testResult = ScriptingLibrary.TestResult()
args = sys.argv
scriptPath = os.path.realpath(__file__)
remoteFiringType = "IR"
dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType)
logger.Configure(args[1],args[2],args[3],args[4],scriptPath)

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
dut.validator.StopCaptureZapFrames()
status = "PASSED"
chkpt.init("shameen_ocr1")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("Pass - {}".format("shameen_ocr1"))
else:
    logger.Log("Fail - {}".format("shameen_ocr1"))
    status = "FAILED"
time.sleep(1)


#if(dut.validator.StartCaptureZapFrames(30)):
#    matchTime = dut.validator.WaitOCRMatch("press",965, 148, 88, 39, 30, 5, "English","Greyscale", 1, 93)    
#    if(matchTime > 0):
#        logger.Log("time:" + str(matchTime))
#        logger.Log("Test case passed")
#        dut.CommitTestResult("Passed")
#    else:
#        logger.Log("Test case failed")
#        dut.CommitTestResult("Failed")
#    dut.validator.StopCaptureZapFrames()



if(dut.validator.StartCaptureZapFrames(30)):        
   #key presses or other code
   time1 = dut.validator.WaitForCheckpoint("shameen_ocr1", 40, 5)
   if(time1 > 0):
       logger.Log("time:" + str(time1))
       logger.Log("Test case passed")
   else:
       logger.Log("Test case failed")
       status = "FAILED"
   dut.validator.StopCaptureZapFrames()
else:
   logger.Log("Unable to start frame capture")
   status = "FAILED"




chkpt.init("shameen_ocr2")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("Pass - {}".format("shameena_ocr2"))
else:
    logger.Log("Fail - {}".format("shameena_ocr2"))
    status = "FAILED"
time.sleep(1)

chkpt.init("shameen_ocr3")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("Pass - {}".format("shameena_ocr3"))
else:
    logger.Log("Fail - {}".format("shameena_ocr3"))
    status = "FAILED"
time.sleep(1)



chkpt.init("shameen_ocr_multiline1")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("Pass - {}".format("shameen_ocr_multiline1"))
else:
    logger.Log("Fail - {}".format("shameen_ocr_multiline1"))
    status = "FAILED"
time.sleep(1)

if(dut.validator.StartCaptureZapFrames(30)):        
   #key presses or other code
   time1 = dut.validator.WaitForCheckpoint("shameen_ocr_multiline1", 40, 5)
   if(time1 > 0):
       logger.Log("time:" + str(time1))
       logger.Log("Test case passed")
   else:
       logger.Log("Test case failed")
       status = "FAILED"
   dut.validator.StopCaptureZapFrames()
else:
   logger.Log("Unable to start frame capture")
   status = "FAILED"



chkpt.init("shameen_ic_pixel1")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("Pass - {}".format("shameen_ic_pixel1"))
else:
    logger.Log("Fail - {}".format("shameen_ic_pixel1"))
    status = "FAILED"
time.sleep(1)


if(dut.validator.StartCaptureZapFrames(30)):        
   #key presses or other code
   time1 = dut.validator.WaitForCheckpoint("shameen_ic_pixel1", 40, 5)
   if(time1 > 0):
       logger.Log("time:" + str(time1))
       logger.Log("Test case passed")
   else:
       logger.Log("Test case failed")
       status = "FAILED"
   dut.validator.StopCaptureZapFrames()
else:
    logger.Log("Unable to start frame capture")
    status = "FAILED"



#chkpt.init("shameena_ic2_pixel")
#if(dut.validator.validateCheckPoint((chkpt))):
#    logger.Log("Pass - {}".format("shameena_ic2_pixel"))
#else:
#    logger.Log("Fail - {}".format("shameena_ic2_pixel"))
#time.sleep(1)

#chkpt.init("shameena_ic3_pixel")
#if(dut.validator.validateCheckPoint((chkpt))):
#    logger.Log("Pass - {}".format("shameena_ic3_pixel"))
#else:
#    logger.Log("Fail - {}".format("shameena_ic3_pixel"))
#time.sleep(1)

chkpt.init("shameen_ic_rmse1")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("Pass - {}".format("shameen_ic_rmse1"))
else:
    logger.Log("Fail - {}".format("shameen_ic_rmse1"))
    status = "FAILED"
time.sleep(1)


if(dut.validator.StartCaptureZapFrames(30)):        
   #key presses or other code
   time1 = dut.validator.WaitForCheckpoint("shameen_ic_rmse1", 40, 5)
   if(time1 > 0):
       logger.Log("time:" + str(time1))
       logger.Log("Test case passed")
   else:
       logger.Log("Test case failed")
       status = "FAILED"
   dut.validator.StopCaptureZapFrames()
else:
    logger.Log("Unable to start frame capture")
    status = "FAILED"

#chkpt.init("shameena_ic2_rmse")
#if(dut.validator.validateCheckPoint((chkpt))):
#    logger.Log("Pass - {}".format("shameena_ic2_rmse"))
#else:
#    logger.Log("Fail - {}".format("shameena_ic2_rmse"))
#time.sleep(1)

#chkpt.init("shameena_ic3_rmse")
#if(dut.validator.validateCheckPoint((chkpt))):
#    logger.Log("Pass - {}".format("shameena_ic3_rmse"))
#else:
#    logger.Log("Fail - {}".format("shameena_ic3_rmse"))
#time.sleep(1)

