#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestCase ID:
#Description:
#Author:
#Date:
#Version:

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr,sys,os,time
clr.AddReference("ScriptingLibrary")
import ScriptingLibrary
dut = ScriptingLibrary.DUT()
logger = ScriptingLibrary.Logger()
chkpt = ScriptingLibrary.CheckPoint()
testResult = ScriptingLibrary.TestResult()
args = sys.argv
scriptPath = os.path.realpath(__file__)
remoteFiringType = "IP"
dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType)
logger.Configure(args[1],args[2],args[3],args[4],scriptPath)
      
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

dut.controller.sendCommand("Home")
time.sleep(2)
x = 190
y = 244
w = 313
h = 49
cap_String = dut.validator.getOCRText(x, y, w, h, "Greyscale", "eng")
logger.Log("cap_string : " + cap_String)
dut.controller.sendCommand("Down")
time.sleep(2)
x = 190
y = 244
w = 313
h = 49
cap_String = dut.validator.getOCRText(x, y, w, h, "Greyscale", "eng")
logger.Log("cap_string : " + cap_String)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Up")
time.sleep(2)
dut.controller.sendCommand("Ok")
time.sleep(2)
dut.controller.sendCommand("Up")
time.sleep(2)
dut.controller.sendCommand("Home")
time.sleep(2)
dut.controller.sendCommand("Up")
time.sleep(2)
dut.controller.sendCommand("Up")
time.sleep(2)
dut.controller.sendCommand("Up")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Down")
time.sleep(2)
dut.controller.sendCommand("Ok")
time.sleep(2)
dut.controller.sendCommand("Ok")
time.sleep(2)

chkpt.init("IPremote_Test1")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("IP remote test passed")
    dut.CommitTestResult("PASSED")
else:
    logger.Log("IP remote test cases failed")
    dut.CommitTestResult("FAILED")
time.sleep(10)
chkpt.init("IPremote_Wifi")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("IP remote test passed")
    dut.CommitTestResult("PASSED")
else:
    logger.Log("IP remote test cases failed")
    dut.CommitTestResult("FAILED")
time.sleep(10)

buttonlist = "Home,Up,Up,Up,Down,Down,Down,Down,Down,Down,Down,Down,Down,Ok,Ok"
dut.controller.sendCommandSequence(buttonlist, 2)
chkpt.init("IPremote_Test1")
if(dut.validator.validateCheckPoint((chkpt))):
    logger.Log("IP remote test passed")
    dut.CommitTestResult("PASSED")
else:
    logger.Log("IP remote test cases failed")
    dut.CommitTestResult("FAILED")
