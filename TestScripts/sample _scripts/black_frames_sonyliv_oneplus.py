#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
#TestCase ID: 
#Description: 
#Author: 
#Date: 
#Version: 

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY'''''''''''''''''''' 
import clr,sys,os,time
from datetime import datetime
from System.Collections.Generic import List
clr.AddReference("MobileScriptingLibrary") 
import MobileScriptingLibrary 
dut = MobileScriptingLibrary.MobileDUT() 
logger = MobileScriptingLibrary.Logger() 
chkpt = MobileScriptingLibrary.CheckPoint() 
config = MobileScriptingLibrary.DeviceConfig()
from threading import Thread

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''' 

#''''''''''''''''''''''''''''FOR ANDROID DEVICE'''''''''''''''''''''''''''' 
config.DeviceType = "Android" 
config.AppPackage = "com.sonyliv" 
config.AppActivity = "tv.accedo.via.android.app.splash.InitializationActivity"

args = sys.argv 
scriptPath = os.path.realpath(__file__) 
dut.Configure(args[1],args[2],args[3],args[4],scriptPath) 
logger.Configure(args[1],args[2],args[3],args[4],scriptPath) 
    
duration = 55

try: 

    if(dut.InitApp(config)): 
        logger.Log("App launched.") 
        time.sleep(20)
        
        #selecting 'Shows' tab
        dut.Tap(343,1944)
        time.sleep(3)

        #clicking search icon
        dut.TapElement(MobileScriptingLibrary.Constants.ElementType.Id, 'com.sonyliv:id/search')
        time.sleep(3)
        
        #tapping the recent search since, sendkeys not working
        dut.Tap(225, 287)
        time.sleep(17)

        #reserving slot to execute HPA
        reservationRequest = MobileScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest() 
        reservationRequest.AlgorithmCount = 1 
        reservationResponse = dut.ReserveSlotForHPA(reservationRequest) 

        if(reservationResponse.Status): 
            request = MobileScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest() 
            deviceInfo = MobileScriptingLibrary.HighPrecisionValidationService.DeviceInfo() 
            algorithmList =List[MobileScriptingLibrary.HighPrecisionValidationService.Algorithm]() 
            algorithm = MobileScriptingLibrary.HighPrecisionValidationService.Algorithm() 
            algorithm.Name = "Histogram"
            #black screen detection in video playback excluding buffering area
            algorithm.Params = "ewogICJyZ2JEZXRhaWxzTGlzdCI6IFsKICAgIHsKICAgICAgIlIiOiAwLAogICAgICAiRyI6IDAsCiAgICAgICJCIjogMCwKICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA4NDUwMCwKICAgICAgImh1ZVRvbGVyYW5jZSI6IDAsCiAgICAgICJzYXR1cmF0aW9uVG9sZXJhbmNlIjogMCwKICAgICAgInZhbHVlVG9sZXJhbmNlIjogMAogICAgfQogIF0sCiAgIm1hc2tEZXRhaWxzIjogewogICAgInhjb3JkIjogMzY0LAogICAgInljb3JkIjogNTEsCiAgICAid2lkdGgiOiAyNjcsCiAgICAiaGVpZ2h0IjogMzE5CiAgfQp9"
            algorithmList.Add(algorithm)

            request.Duration = duration
            request.Token = reservationResponse.Data.Token 
            request.Algorithms = algorithmList 
            request.DeviceInfo = deviceInfo 

            response = dut.validator.StartHighPrecisionFrameAnalysis(request) 
            # to start playback, Selecting 1st among the listed search results
            dut.Tap(280, 519)

            statusRequest = MobileScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest() 
            statusRequest.Token = response.Data.Token 
            statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest) 
            sum_of_duration = 0
            while statusResponse.Status == 'In Progress':
                logger.Log("Status of HPA is 'In Progress'. Sleeping for 3 seconds and fetching results again...")
                time.sleep(3)
                statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest)
            if statusResponse is not None and statusResponse.Data is not None:
                for data in statusResponse.Data:
                    for algorithm_data in data.AlgorithmData:
                        logger.Log("Duration obtained from API : " + str(algorithm_data.Duration))
                        dut.CommitStepResult("Duration Obtained!", str(algorithm_data.Duration))
                        sum_of_duration += algorithm_data.Duration
            else:
                logger.Log("Failed to get duration")
            logger.Log("*********Total Duration for which Black Screen is detected *********"+str(sum_of_duration))
            black_frame_ratio = sum_of_duration/(duration * 1000)
            logger.Log("-----------------------------------------------------------")
            logger.Log("********* Black Frame Ratio *********"+str(black_frame_ratio))
            logger.Log("-----------------------------------------------------------")
            dut.CommitStepResult("Black Frame Ratio", str(black_frame_ratio))
    
finally: 
    dut.Stop() 
    pass
#'''''''''''''''''''''''''END AUTOGENERATED CODE''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
