#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
#TestCase ID: 
#Description: 
#Author: 
#Date: 
#Version: 

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY'''''''''''''''''''' 
import clr,sys,os,time 
from System.Collections.Generic import List 
clr.AddReference("ScriptingLibrary") 
import ScriptingLibrary 
dut = ScriptingLibrary.DUT() 
logger = ScriptingLibrary.Logger() 
chkpt = ScriptingLibrary.CheckPoint() 
testResult = ScriptingLibrary.TestResult() 
args = sys.argv 
scriptPath = os.path.realpath(__file__) 
remoteFiringType = "IP" 
dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType) 
logger.Configure(args[1],args[2],args[3],args[4],scriptPath) 

#''''''''''''''''''''''''''''''''IMPORTS'''''''''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''END IMPORTS'''''''''''''''''''''''''''''''' 

#'''''''''''''''''''''''''END AUTOGENERATED CODE''''''''''''''''''''''''''' 
#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest() 
reservationRequest.AlgorithmCount = 1 
reservationResponse = dut.ReserveSlotForHPA(reservationRequest) 
if(reservationResponse.Status): 
    request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest() 
    deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo() 
    algorithmList =List[ScriptingLibrary.HighPrecisionValidationService.Algorithm]() 
    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
    algorithm.Name = "Histogram" 
    #algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
    algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
    algorithmList.Add(algorithm) 
    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
    algorithm.Name = "HoughCircles" 
    algorithm.Params = "ewoJIm1hc2tEZXRhaWxzIjogewogICAgICAgICJ4Y29yZCI6IDE0NjgsCiAgICAgICAgInljb3JkIjogNTI1LAogICAgICAgICJ3aWR0aCI6IDE3NSwKICAgICAgICAiaGVpZ2h0IjogMTY3CiAgICB9Cn0"
    #algorithmList.Add(algorithm) 
    request.Duration = 30 
    request.Token = reservationResponse.Data.Token 
    request.Algorithms = algorithmList 
    request.DeviceInfo = deviceInfo 
    response = dut.validator.StartHighPrecisionFrameAnalysis(request) 
    logger.Log("Response - " + response.Data.Token) 
    if (response.Status): 
        logger.Log("TRUE") 
    for i in range(0,5): 
        dut.controller.sendCommand("UP") 
        time.sleep(5) 
    time.sleep(20) 
    statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest() 
    statusRequest.Token = response.Data.Token 
    statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest) 

    dut.CommitTestResult("PASSED")