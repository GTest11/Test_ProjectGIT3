#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
#TestCase ID: Histogram_IR STBs
#Description:
#Author: 
#Date: 
#Version: 

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY'''''''''''''''''''' 
import clr,sys,os,time 
from System.Collections.Generic import List 
clr.AddReference("ScriptingLibrary") 
import ScriptingLibrary 
dut = ScriptingLibrary.DUT() 
logger = ScriptingLibrary.Logger() 
chkpt = ScriptingLibrary.CheckPoint() 
testResult = ScriptingLibrary.TestResult() 
args = sys.argv 
scriptPath = os.path.realpath(__file__) 
remoteFiringType = "IR" 
dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType) 
logger.Configure(args[1],args[2],args[3],args[4],scriptPath) 

#''''''''''''''''''''''''''''''''IMPORTS'''''''''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''END IMPORTS'''''''''''''''''''''''''''''''' 

#'''''''''''''''''''''''''END AUTOGENERATED CODE''''''''''''''''''''''''''' 
#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
for i in range(0,10):
    reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest() 
    reservationRequest.AlgorithmCount = 1 
    reservationResponse = dut.ReserveSlotForHPA(reservationRequest) 
    if(reservationResponse.Status): 
        request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest() 
        deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo() 
        algorithmList =List[ScriptingLibrary.HighPrecisionValidationService.Algorithm]() 
        algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
        algorithm.Name = "Histogram" 
        #algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
        algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
        algorithmList.Add(algorithm) 
    #    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
    #    algorithm.Name = "HoughCircles" 
    #    algorithm.Params = "ewoJIm1hc2tEZXRhaWxzIjogewogICAgICAgICJ4Y29yZCI6IDE0NjgsCiAgICAgICAgInljb3JkIjogNTI1LAogICAgICAgICJ3aWR0aCI6IDE3NSwKICAgICAgICAiaGVpZ2h0IjogMTY3CiAgICB9Cn0"
        #algorithmList.Add(algorithm) 
        request.Duration = 30 
        request.Token = reservationResponse.Data.Token 
        request.Algorithms = algorithmList 
        request.DeviceInfo = deviceInfo 
        response = dut.validator.StartHighPrecisionFrameAnalysis(request) 
        logger.Log("Response - " + response.Data.Token) 
        if (response.Status): 
            logger.Log("TRUE") 
        for i in range(0,5): 
            dut.controller.sendCommand("Up")
            time.sleep(1)
            dut.controller.sendCommand("Home")          
        time.sleep(200) 
        statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest() 
        statusRequest.Token = response.Data.Token 
        statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest) 
        logger.Log("StatusRespose - " + str(statusResponse)) 

        dut.CommitTestResult("PASSED")

    reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest() 
    reservationRequest.AlgorithmCount = 1 
    reservationResponse = dut.ReserveSlotForHPA(reservationRequest) 
    if(reservationResponse.Status): 
        request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest() 
        deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo() 
        algorithmList =List[ScriptingLibrary.HighPrecisionValidationService.Algorithm]() 
        algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
        #algorithm.Name = "Histogram" 
        #algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
        #algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
        #algorithmList.Add(algorithm) 
    #    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
        algorithm.Name = "HoughCircles" 
        algorithm.Params = "ewoJIm1hc2tEZXRhaWxzIjogewogICAgICAgICJ4Y29yZCI6IDE0NjgsCiAgICAgICAgInljb3JkIjogNTI1LAogICAgICAgICJ3aWR0aCI6IDE3NSwKICAgICAgICAiaGVpZ2h0IjogMTY3CiAgICB9Cn0"
        algorithmList.Add(algorithm) 
        request.Duration = 30 
        request.Token = reservationResponse.Data.Token 
        request.Algorithms = algorithmList 
        request.DeviceInfo = deviceInfo 
        response = dut.validator.StartHighPrecisionFrameAnalysis(request) 
        logger.Log("Response - " + response.Data.Token) 
        if (response.Status): 
            logger.Log("TRUE") 
        for i in range(0,5): 
            dut.controller.sendCommand("Up")
            time.sleep(1)
            dut.controller.sendCommand("Home")          
        time.sleep(200) 
        statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest() 
        statusRequest.Token = response.Data.Token 
        statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest) 
        logger.Log("StatusRespose - " + str(statusResponse)) 

        dut.CommitTestResult("PASSED")




    reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest() 
    reservationRequest.AlgorithmCount = 1 
    reservationResponse = dut.ReserveSlotForHPA(reservationRequest) 
    if(reservationResponse.Status): 
        request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest() 
        deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo() 
        algorithmList =List[ScriptingLibrary.HighPrecisionValidationService.Algorithm]() 
        algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
        #algorithm.Name = "Histogram" 
        #algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
        #algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
        #algorithmList.Add(algorithm) 
    #    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
        algorithm.Name = "MatchTemplate"
        #algorithm.Params = "ewogICJJbWFnZURhdGEiOiAiLzlqLzRBQVFTa1pKUmdBQkFRRUFZQUJnQUFELzJ3QkRBQWdHQmdjR0JRZ0hCd2NKQ1FnS0RCUU5EQXNMREJrU0V3OFVIUm9mSGgwYUhCd2dKQzRuSUNJc0l4d2NLRGNwTERBeE5EUTBIeWM1UFRneVBDNHpOREwvMndCREFRa0pDUXdMREJnTkRSZ3lJUndoTWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qTC93QUFSQ0FCRkFFc0RBU0lBQWhFQkF4RUIvOFFBSHdBQUFRVUJBUUVCQVFFQUFBQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkFBQWdFREF3SUVBd1VGQkFRQUFBRjlBUUlEQUFRUkJSSWhNVUVHRTFGaEJ5SnhGREtCa2FFSUkwS3h3UlZTMGZBa00ySnlnZ2tLRmhjWUdSb2xKaWNvS1NvME5UWTNPRGs2UTBSRlJrZElTVXBUVkZWV1YxaFpXbU5rWldabmFHbHFjM1IxZG5kNGVYcURoSVdHaDRpSmlwS1RsSldXbDVpWm1xS2pwS1dtcDZpcHFyS3p0TFcydDdpNXVzTER4TVhHeDhqSnl0TFQxTlhXMTlqWjJ1SGk0K1RsNXVmbzZlcng4dlAwOWZiMytQbjYvOFFBSHdFQUF3RUJBUUVCQVFFQkFRQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkVBQWdFQ0JBUURCQWNGQkFRQUFRSjNBQUVDQXhFRUJTRXhCaEpCVVFkaGNSTWlNb0VJRkVLUm9iSEJDU016VXZBVlluTFJDaFlrTk9FbDhSY1lHUm9tSnlncEtqVTJOemc1T2tORVJVWkhTRWxLVTFSVlZsZFlXVnBqWkdWbVoyaHBhbk4wZFhaM2VIbDZnb09FaFlhSGlJbUtrcE9VbFphWG1KbWFvcU9rcGFhbnFLbXFzck8wdGJhM3VMbTZ3c1BFeGNiSHlNbkswdFBVMWRiWDJObmE0dVBrNWVibjZPbnE4dlAwOWZiMytQbjYvOW9BREFNQkFBSVJBeEVBUHdEMGJPS090R0tRa0RxYVF4c2poQnpRckJ4d2FqblRmR2NWV3RKQ0gyR2hnTnZibDRwbFZUM3E4ajdrQjZWazZpQ0xwT2VNMWN1cDFnc1FRZm1JNlVBU0xleE5PWWcyV3F6V0RwTURUVEdkczVyZVBBNTRwc1NGcEtUTkprMElZK3FkeVhVNUhTcmxSc3lINVRpaGdWSWJ2NWdyQ215UXQ1d2RPbWFmSmJxeCtWZ0tuaGpLb0F4elNZRlc1c3pQSWpIdFVHbzIwa3pJaWZkSFd0YnZTRmM5QjFGQUdkSmVXK2wyeXFDcGNpc2Y3YmYzOXlwaCtWQWZTcmo2STA5NnozRTJFNmpMWXJYZ2l0TFNQYkd5bkhmTkRBbGpEQ05RL3dCN0hOT3BGZFpNbFdCK2xITk5BRW1TT0tvTmJ5RTUzR3RHb3BKRWk1WWlnQ21MZVVNQ1dOWGs0VVpxakpjUElma0ZXWVdLSU54NU5TMndKeFIxUHBSbmpHYWhudUk0WFdObkNzM0F6VEVZK3I2ZmUzTndEYnk0R09RS3ltMFhWYzh5TmozTkxlM3VxYWZxRFNNV2FGdW5wVzNwbmlLRzhBamxJVjhZNW9hdHFNVFJiTzZ0WW1FN2s1clhBT090Smtub2NnMHRDWURxclhGdjVyQTVxelJUWUZkWVZpV3FoSm11QUFlQlZxNjNiTUNvN1dMWjh4RklCczhwamRWWDFyQThaeFhBUzN1WVdJMkVFNCt0YnQxek9vSHJVdDVhcmUyVFJNTTVYaW1CVDBpNXQ5WTBwSTVnR2RWd1QzcWhjZUZ3bDRzMERsVkI2Q3MvUVlMelQ5ZGt0eXJlU2M4OXE3VThrMGhESVYyUklwNXdLZWVUbWt5S1hGRFF4MUpSUlRBQ01uQm93QU1Zb29vWUZXYUlOS0dOV0Y0QUZGRkpBTjh0TnhrQ2pkNjA2aWltSkM5cU0wVVVEUC9aIiwKICAiTWF0Y2hTY29yZSI6IDAuMSwKICAibWFza0RldGFpbHMiOiB7CiAgICAieGNvcmQiOiAyODEsCiAgICAieWNvcmQiOiA1OTksCiAgICAid2lkdGgiOiA3NSwKICAgICJoZWlnaHQiOiA2OQogIH0KfQ=="
        algorithm.Params ="ewogICJJbWFnZURhdGEiOiAiLzlqLzRBQVFTa1pKUmdBQkFRRUFZQUJnQUFELzJ3QkRBQWdHQmdjR0JRZ0hCd2NKQ1FnS0RCUU5EQXNMREJrU0V3OFVIUm9mSGgwYUhCd2dKQzRuSUNJc0l4d2NLRGNwTERBeE5EUTBIeWM1UFRneVBDNHpOREwvMndCREFRa0pDUXdMREJnTkRSZ3lJUndoTWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qTC93QUFSQ0FBcUFEQURBU0lBQWhFQkF4RUIvOFFBSHdBQUFRVUJBUUVCQVFFQUFBQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkFBQWdFREF3SUVBd1VGQkFRQUFBRjlBUUlEQUFRUkJSSWhNVUVHRTFGaEJ5SnhGREtCa2FFSUkwS3h3UlZTMGZBa00ySnlnZ2tLRmhjWUdSb2xKaWNvS1NvME5UWTNPRGs2UTBSRlJrZElTVXBUVkZWV1YxaFpXbU5rWldabmFHbHFjM1IxZG5kNGVYcURoSVdHaDRpSmlwS1RsSldXbDVpWm1xS2pwS1dtcDZpcHFyS3p0TFcydDdpNXVzTER4TVhHeDhqSnl0TFQxTlhXMTlqWjJ1SGk0K1RsNXVmbzZlcng4dlAwOWZiMytQbjYvOFFBSHdFQUF3RUJBUUVCQVFFQkFRQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkVBQWdFQ0JBUURCQWNGQkFRQUFRSjNBQUVDQXhFRUJTRXhCaEpCVVFkaGNSTWlNb0VJRkVLUm9iSEJDU016VXZBVlluTFJDaFlrTk9FbDhSY1lHUm9tSnlncEtqVTJOemc1T2tORVJVWkhTRWxLVTFSVlZsZFlXVnBqWkdWbVoyaHBhbk4wZFhaM2VIbDZnb09FaFlhSGlJbUtrcE9VbFphWG1KbWFvcU9rcGFhbnFLbXFzck8wdGJhM3VMbTZ3c1BFeGNiSHlNbkswdFBVMWRiWDJObmE0dVBrNWVibjZPbnE4dlAwOWZiMytQbjYvOW9BREFNQkFBSVJBeEVBUHdEaVd2NExlVUtWRmF0amRSenNwVkJqNlZ5R29OKzk0RmRyNFAwcjdkRXhNbURqZ1Z4T25IbHVkdCtWNmwyNktpTVA1UUMrdFc5VHQ0Tk8waTN1MUNscEcyNC9Db3dVdHJ1V3l2TUFZWXFUVkRXTmR0NWJTM3RUd3NjaXR4N0dyaENMK0l6bkp2NFNhK3VocFZuSGN6b3FyS0FSV2FmRk5vNUdjRWo4YTZpNDhNM0hqb1FyQXpSMmtTOEhIRmVZYTdvTWVqNjQxbVpTMjA0em10UFp3V3hrcFNiMUsyb0VySVBjMTMvaEt5bVMwamxTWGFTTzV4WEY2anA4bHhJcFFuQVBhdXA4TjIxeSsxRExzalhybW9pMUpHczMxSTlmdlpKdGEyTklDVjdpdWUxZzRpUE5lZ3Q0R2wxYnpyaXpmZVZQQnJsZFg4STZ0R0lvcElITzQ3ZDJPS09TN3VKVkZheDJmdzhlKzFqdzY5dkJLSWhqRzR2dDdWdy9qM3cxSjRmdm8zbHVSTTh4T1dEWjUrdGVpK0JQQ2h0dEVhR2VZdzNJVWxjdHgrVmNINDBzYjZUVW5pdVoybThwanR6MnJkdFJSakRXVnpHdGRaVGI4NmlyUytJMmprRWNCSURuSFd1V1dsUEJVais5V01WYVdoMWNxdGMrai9EUGlLeDAzd2dwTXErZVNSeVJtdEh4SHFWdXZoZXoxSnhHUzBpbkxlaE9LOEE4Nlg3SEVQTWZHNGNialhUZUpKcFQ0R0NtVnlBb3dDeDlhMlRPWGwwT3ErSW11eDJtaDJkM3BWNHF6Rk1FUm5yelhsMFBpR1c3bGFTN2JMdHlTVFdYY3l5TnA4S3RJNVVFOEZqVkE5YVQ5N1JtbE9DUC85az0iLAogICJNYXRjaFNjb3JlIjogMC41MiwKICAibWFza0RldGFpbHMiOiB7CiAgICAieGNvcmQiOiAyOTksCiAgICAieWNvcmQiOiAxODQsCiAgICAid2lkdGgiOiA0OCwKICAgICJoZWlnaHQiOiA0MgogIH0KfQ=="
        #"ewogICJJbWFnZURhdGEiOiAiLzlqLzRBQVFTa1pKUmdBQkFRRUFZQUJnQUFELzJ3QkRBQWdHQmdjR0JRZ0hCd2NKQ1FnS0RCUU5EQXNMREJrU0V3OFVIUm9mSGgwYUhCd2dKQzRuSUNJc0l4d2NLRGNwTERBeE5EUTBIeWM1UFRneVBDNHpOREwvMndCREFRa0pDUXdMREJnTkRSZ3lJUndoTWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qTC93QUFSQ0FBdUFERURBU0lBQWhFQkF4RUIvOFFBSHdBQUFRVUJBUUVCQVFFQUFBQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkFBQWdFREF3SUVBd1VGQkFRQUFBRjlBUUlEQUFRUkJSSWhNVUVHRTFGaEJ5SnhGREtCa2FFSUkwS3h3UlZTMGZBa00ySnlnZ2tLRmhjWUdSb2xKaWNvS1NvME5UWTNPRGs2UTBSRlJrZElTVXBUVkZWV1YxaFpXbU5rWldabmFHbHFjM1IxZG5kNGVYcURoSVdHaDRpSmlwS1RsSldXbDVpWm1xS2pwS1dtcDZpcHFyS3p0TFcydDdpNXVzTER4TVhHeDhqSnl0TFQxTlhXMTlqWjJ1SGk0K1RsNXVmbzZlcng4dlAwOWZiMytQbjYvOFFBSHdFQUF3RUJBUUVCQVFFQkFRQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkVBQWdFQ0JBUURCQWNGQkFRQUFRSjNBQUVDQXhFRUJTRXhCaEpCVVFkaGNSTWlNb0VJRkVLUm9iSEJDU016VXZBVlluTFJDaFlrTk9FbDhSY1lHUm9tSnlncEtqVTJOemc1T2tORVJVWkhTRWxLVTFSVlZsZFlXVnBqWkdWbVoyaHBhbk4wZFhaM2VIbDZnb09FaFlhSGlJbUtrcE9VbFphWG1KbWFvcU9rcGFhbnFLbXFzck8wdGJhM3VMbTZ3c1BFeGNiSHlNbkswdFBVMWRiWDJObmE0dVBrNWVibjZPbnE4dlAwOWZiMytQbjYvOW9BREFNQkFBSVJBeEVBUHdEd1dyVmxqemxIdlZhcnVuUW1TNEJVWndhWXpyb2x4R3VPNHFZcGdaTklnemJxQU1GUlVoSG1oVkJ4NjFEdUJIZ0NtOFZQT21OcW9NbXF6cVVPRFQzQWRSVVc2aWl3SEZMRXg2Q3VuOE82RnFFbzgrT0V0R08vYW8xc2tEWXhYWmVITlIxS05WdExLM1FxZXJGYzBKZ1pGeXJ4U2JIWGF3NmlvUnVCem10blg3VzRndmQxd1F6dnlkb3hpc3Z5K0JpZ0M1YkVlVVRzM05pcWR5cm1UTERGYVZwSElrUmRVejlhcTNjclB3eTQvQ2hhQVVOdEZTNG9wZ1o1NWx4bXVqMHZ4TkxvMXN5Ukw4ekRBSTYxZ3hxTTVvdWZ1ZlRwVUFkNlBLdWRHTi9xRWhhU1RsUVNLekpiR0NHM2hueU1PY1Z5VDZ0Y3ZCSGJ1MlkwNkN0V1hWM21zSTQ5dU5wNHFyanNiRnpLMWk2bE1GR0FOWk54TjVzcE9LcnlYOHM2S3Jub0toODBqbWx6QllueVBTaW9mTzlxS0FQLzJRPT0iLAogICJNYXRjaFNjb3JlIjogMC41LAogICJtYXNrRGV0YWlscyI6IHsKICAgICJ4Y29yZCI6IDI5NCwKICAgICJ5Y29yZCI6IDE3NSwKICAgICJ3aWR0aCI6IDQ5LAogICAgImhlaWdodCI6IDQ2CiAgfQp9"  
        algorithmList.Add(algorithm) 
        request.Duration = 30 
        request.Token = reservationResponse.Data.Token 
        request.Algorithms = algorithmList 
        request.DeviceInfo = deviceInfo 
        response = dut.validator.StartHighPrecisionFrameAnalysis(request) 
        logger.Log("Response - " + response.Data.Token) 
        if (response.Status): 
            logger.Log("TRUE") 
        for i in range(0,5): 
            dut.controller.sendCommand("Up")
            time.sleep(1)
            dut.controller.sendCommand("Home")          
        time.sleep(200) 
        statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest() 
        statusRequest.Token = response.Data.Token 
        statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest) 
        logger.Log("StatusRespose - " + str(statusResponse)) 

        dut.CommitTestResult("PASSED")


