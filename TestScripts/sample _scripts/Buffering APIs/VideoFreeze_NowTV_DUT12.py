#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestCase ID: Histogram and Video freeze in DUT 12
#Description: Testing on Video screen
#Author:
#Date:
#Version:

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr,sys,os,time
import base64
from System.Collections.Generic import List
clr.AddReference("ScriptingLibrary")
import ScriptingLibrary
dut = ScriptingLibrary.DUT()
logger = ScriptingLibrary.Logger()
chkpt = ScriptingLibrary.CheckPoint()
testResult = ScriptingLibrary.TestResult()
args = sys.argv
scriptPath = os.path.realpath(__file__)
remoteFiringType = "IR"

dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType)
logger.Configure(args[1],args[2],args[3],args[4],scriptPath)

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
for i in range(0,5):
    dut.controller.sendCommand("Back")
    time.sleep(2)
    dut.controller.sendCommand("Home")

dut.controller.sendCommand("Home")
time.sleep(10)
dut.controller.sendCommand("NowTv")
time.sleep(40)
chkpt.init("NowTv_Sports")
if(dut.validator.validateCheckPoint((chkpt))):     
    logger.Log("Required Screen reached")
    dut.CommitTestResult("PASSED")
else:
    logger.Error("Wrong Screen reached")
    dut.CommitTestResult("FAILED")

dut.controller.sendCommand("Right")
time.sleep(10)
dut.controller.sendCommand("Ok")

reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest()
reservationRequest.AlgorithmCount = 2
reservationResponse = dut.ReserveSlotForHPA(reservationRequest)
if(reservationResponse.Status):
    request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest()
    deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo()
    algorithmList =List[ScriptingLibrary.HighPrecisionValidationService.Algorithm]()
    ###Histogram
    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm() 
    algorithm.Name = "Histogram" 
    #algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMzEsCiAgICAgICAgImIiOiAxNDAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTE2LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiA0MSwKICAgICAgICAiZyI6IDEzOSwKICAgICAgICAiYiI6IDI2LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH0sIHsKICAgICAgICAiciI6IDAsCiAgICAgICAgImciOiAxMDEsCiAgICAgICAgImIiOiAyNTUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfV0sCiAgICAibWFza0RldGFpbHMiOiB7CiAgICAgICAgInhjb3JkIjogMTQ2OCwKICAgICAgICAieWNvcmQiOiA1MjUsCiAgICAgICAgIndpZHRoIjogMTc1LAogICAgICAgICJoZWlnaHQiOiAxNjcKICAgIH0KfQ=="
    algorithm.Params = "eyAgICAicmdiRGV0YWlsc0xpc3QiOiBbewogICAgICAgICJyIjogMTAwLAogICAgICAgICJnIjogMTAsCiAgICAgICAgImIiOiAxNjAsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogMjU1LAogICAgICAgICJnIjogMTA1LAogICAgICAgICJiIjogNSwKICAgICAgICAicGl4ZWxDb3VudFRocmVzaG9sZCI6IDUwCiAgICB9LCB7CiAgICAgICAgInIiOiAyNSwKICAgICAgICAiZyI6IDE2MCwKICAgICAgICAiYiI6IDUsCiAgICAgICAgInBpeGVsQ291bnRUaHJlc2hvbGQiOiA1MAogICAgfSwgewogICAgICAgICJyIjogNywKICAgICAgICAiZyI6IDg1LAogICAgICAgICJiIjogMjQ1LAogICAgICAgICJwaXhlbENvdW50VGhyZXNob2xkIjogNTAKICAgIH1dLAogICAgIm1hc2tEZXRhaWxzIjogewogICAgICAgICJ4Y29yZCI6IDg5NywKICAgICAgICAieWNvcmQiOiA0OTIsCiAgICAgICAgIndpZHRoIjogMTE3LAogICAgICAgICJoZWlnaHQiOiA5Nw=="
    algorithmList.Add(algorithm) 
    ###Video Freeze
    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm()
    algorithm.Name = "VideoFreeze"
    algorithm.IsReferenceBased = False
    algorithm.Params = "ewoJIk1hdGNoU2NvcmUiOiAwLjk5LAoJIk1hc2tEZXRhaWxzIjogewoJCSJ4Y29yZCI6IDc2MywKCQkieWNvcmQiOiA2NjUsCgkJIndpZHRoIjogNDI4LAoJCSJoZWlnaHQiOiAzNTEKCX0KfQ=="
#    base64input = base64.b64encode(bytes(json_input), 'utf-8')
#    algorithm.Params = base64input
    algorithm.MinDuration = 1000
    algorithm.MinTimeGap = 1000
    algorithmList.Add(algorithm)
    request.Duration = 120#Duration in seconds. How many seconds the executor should record the frames.
    request.Token = reservationResponse.Data.Token
    request.Algorithms = algorithmList
    request.DeviceInfo = deviceInfo 
    response = dut.validator.StartHighPrecisionFrameAnalysis(request)
    logger.Log("Response - " + response.Data.Token)
    if (response.Status):
        logger.Log("TRUE")
    for i in range(0,4):
        #dut.controller.sendCommand("Ok")
        time.sleep(1)
        dut.controller.sendCommand("Ok")
        
    time.sleep(400)
    statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest()
    statusRequest.Token = response.Data.Token
    statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest)
    #dut.validator.StopHighPrecisionFrameAnalysis(response.Data.Token)
    logger.Log("StatusRespose - " + str(statusResponse))
    dut.CommitTestResult("PASSED")