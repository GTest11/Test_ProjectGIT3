# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestCase ID: VideoStartup Time calculation
#Description: VST calculation both DetectScreenchange and Buffering with threading 
#Author:Victoria STB
#Date: 25/04/2019
#Version:1.0

# ''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr
import sys
import os
import time
import base64
from System.Collections.Generic import List
from threading import Thread
clr.AddReference("ScriptingLibrary")
import ScriptingLibrary
dut = ScriptingLibrary.DUT()
logger = ScriptingLibrary.Logger()
chkpt = ScriptingLibrary.CheckPoint()
testResult = ScriptingLibrary.TestResult()
args = sys.argv
scriptPath = os.path.realpath(__file__)
remoteFiringType = "IR"
dut.Configure(args[1], args[2], args[3], args[4], scriptPath, remoteFiringType)
logger.Configure(args[1], args[2], args[3], args[4], scriptPath)

# ''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
# ''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
sum_of_duration_DetectScreen = 0
sum_duration_buffering = 0


def DetectScreenChange():
    global sum_of_duration_DetectScreen
    # Detect Screen Change Started
    resp = ScriptingLibrary.APIResponse.ResponseData()
    inputParam = ScriptingLibrary.HighPrecisionValidationService.MotionParams()
    #print type(inputParam)
    inputParam.x_cord = 629
    inputParam.y_cord = 378
    inputParam.width = 451
    inputParam.height = 285
    inputParam.sensitivity = 3
    inputParam.enableAggrassiveMode = True
    lstInputParam = List[ScriptingLibrary.HighPrecisionValidationService.MotionParams](
    )
    lstInputParam.Add(inputParam)
    # 2nd transition includes buffering Area
    inputParam2 = ScriptingLibrary.HighPrecisionValidationService.MotionParams()
    inputParam2.x_cord = 174
    inputParam2.y_cord = 206
    inputParam2.width = 587
    inputParam2.height = 402
    inputParam2.sensitivity = 3
    inputParam2.enableAggressiveMode = True
    lstInputParam.Add(inputParam2)
#    ####3rnd transition
#    inputParam3 = ScriptingLibrary.HighPrecisionValidationService.MotionParams()
#    inputParam3.x_cord = 172#722
#    inputParam3.y_cord = 206#636
#    inputParam3.width =  587#389
#    inputParam3.height = 402#198
#    inputParam3.sensitivity = 3
#    inputParam3.enableAggressiveMode = True
#    #lstInputParam =List[ScriptingLibrary.HighPrecisionValidationService.MotionParams]()
#    lstInputParam.Add(inputParam3)
    stepcommit = "valid arguments"
    expected = "Motion Detected"
    # Cachecommand started
    # dut.controller.cacheCommand("Ok")
    dut.controller.cacheCommand("Ok")
    response = dut.validator.DetectScreenChange(110, lstInputParam)
    #sum_of_duration_DetectScreen = 0
    count = 0
    if response is not None and response.MotionData is not None:
        for i in response.MotionData:
            count += 1
            logger.Log("Video startup time from DCC API >>> " +
                       str(i.Duration))
            dut.CommitStepResult(
                "Video startup time from DCC!", str(
                    i.Duration))
            sum_of_duration_DetectScreen += i.Duration
    else:
        logger.Log("Failed to get duration")
        dut.CommitStepResult("Duration !!!", "FAILED")
    logger.Log("No: of durations calculated from response ---> " + str(count))
    logger.Log(
        "Total duration calculated from DCC response ---> " +
        str(sum_of_duration_DetectScreen))
    return sum_of_duration_DetectScreen


def BufferingAPI():
    global sum_duration_buffering
    # Video buffering API Started for Histogram algorithm
    reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest()
    reservationRequest.AlgorithmCount = 1
    reservationResponse = dut.ReserveSlotForHPA(reservationRequest)
    if(reservationResponse.Status):
        request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest()
        deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo()
        algorithmList = List[ScriptingLibrary.HighPrecisionValidationService.Algorithm](
        )
        algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm()
        algorithm.Name = "Histogram"
        algorithm.Params = "ewoJInJnYkRldGFpbHNMaXN0IjogW3sKCQkiciI6IDEwMCwKCQkiZyI6IDMxLAoJCSJiIjogMTQwLAoJCSJwaXhlbENvdW50VGhyZXNob2xkIjogODAKCX0sIHsKCQkiciI6IDI1NSwKCQkiZyI6IDExNiwKCQkiYiI6IDUsCgkJInBpeGVsQ291bnRUaHJlc2hvbGQiOiA4MAoJfSwgewoJCSJyIjogNDEsCgkJImciOiAxMzksCgkJImIiOiAyNiwKCQkicGl4ZWxDb3VudFRocmVzaG9sZCI6IDgwCgl9LCB7CgkJInIiOiAwLAoJCSJnIjogMTAxLAoJCSJiIjogMjU1LAoJCSJwaXhlbENvdW50VGhyZXNob2xkIjogODAKCX1dLAoJIm1hc2tEZXRhaWxzIjogewoJCSJ4Y29yZCI6IDkwMSwKCQkieWNvcmQiOiA0NzEsCgkJIndpZHRoIjogMTIxLAoJCSJoZWlnaHQiOiAxMjYKCX0KfQ=="
        algorithmList.Add(algorithm)
        # time.sleep(10)
        # Duration in seconds. How many seconds the executor should record the
        # frames.
        request.Duration = 200
        request.Token = reservationResponse.Data.Token
        request.Algorithms = algorithmList
        request.DeviceInfo = deviceInfo
        # dut.controller.cacheCommand("Ok")
        response = dut.validator.StartHighPrecisionFrameAnalysis(request)
        logger.Log("Response - " + response.Data.Token)
        if (response.Status):
            logger.Log("TRUE")
        # for i in range(0,4):
        # dut.controller.sendCommand("Ok")
        # time.sleep(2)
        statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest()
        statusRequest.Token = response.Data.Token
        #statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest)
        #logger.Log("Status of GetHighPrecisionFrameAnalysisResult response "+str(statusResponse))
        # while statusResponse == 'In Progress':
        buffering_check_completed = False
        while not buffering_check_completed:
            statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(
                statusRequest)
            # sum_duration_buffering=0
            if statusResponse is not None and statusResponse.Data is not None and statusResponse.Data.Count > 0 and statusResponse.Status == 'Completed':
                buffering_check_completed = True
                for data in statusResponse.Data:
                    for algorithm_data in data.AlgorithmData:
                        logger.Log(
                            "Buffering Duration  returned by API -" + str(algorithm_data.Duration))
                        sum_duration_buffering += algorithm_data.Duration
            else:
                pass
                #logger.Log("Failed to get duration")
        logger.Log(
            "Total buffering duration ====> " +
            str(sum_duration_buffering))


if __name__ == '__main__':
    #global sum_of_duration_DetectScreen,sum_duration_buffering
    for i in range(0, 1):
        dut.controller.sendCommand("Back")

    dut.controller.sendCommand("Home")
    time.sleep(10)
    dut.controller.sendCommand("NowTv")
    time.sleep(50)
    chkpt.init("NowTv_Sports_IMG")
    for i in range(0, 10):
        if(dut.validator.validateCheckPoint((chkpt))):
            logger.Log("Required Screen reached")
            # Press right if passed to navigate to video assets
            time.sleep(10)
            dut.controller.sendCommand("Right")
            logger.Log("Starts break...")
            break
            logger.Log("Stops break...")
            dut.CommitTestResult("PASSED")
        else:
            dut.controller.sendCommand("Down")
            logger.Error("Wrong Screen reached")
            dut.CommitTestResult("FAILED")

    # int sum_of_duration
#    Thread(target = DetectScreenChange).start()
#    Thread(target = BufferingAPI).start()
    t1 = Thread(target=DetectScreenChange)
    t2 = Thread(target=BufferingAPI)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    logger.Log(
        "Total duration from detect screen change ====> " +
        str(sum_of_duration_DetectScreen))
    vsttime = str(sum_of_duration_DetectScreen + sum_duration_buffering)
    logger.Log("Total VST start time : buffering+DCC ====> " +
               str(sum_of_duration_DetectScreen + sum_duration_buffering))
    print "Total VST start time ---" + vsttime + " " 'ms'
