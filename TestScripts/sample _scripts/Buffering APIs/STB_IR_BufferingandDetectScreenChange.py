#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestCase ID:
#Description:
#Author:
#Date:
#Version:

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr,sys,os,time
import base64
from System.Collections.Generic import List
clr.AddReference("ScriptingLibrary")
import ScriptingLibrary
dut = ScriptingLibrary.DUT()
logger = ScriptingLibrary.Logger()
chkpt = ScriptingLibrary.CheckPoint()
testResult = ScriptingLibrary.TestResult()
args = sys.argv
scriptPath = os.path.realpath(__file__)
remoteFiringType = "IR"

dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType)
logger.Configure(args[1],args[2],args[3],args[4],scriptPath)

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
for i in range(0,5):
    dut.controller.sendCommand("Back")
    time.sleep(2)
    dut.controller.sendCommand("Home")

dut.controller.sendCommand("Home")
time.sleep(10)
dut.controller.sendCommand("NowTv")
time.sleep(40)
chkpt.init("NowTv_Sports")
if(dut.validator.validateCheckPoint((chkpt))):     
    logger.Log("Required Screen reached")
    dut.CommitTestResult("PASSED")
else:
    logger.Error("Wrong Screen reached")
    dut.CommitTestResult("FAILED")

dut.controller.sendCommand("Ok")
time.sleep(5)
chkpt.init("Validate_SkySports")
if(dut.validator.validateCheckPoint((chkpt))):     
    logger.Log("Required Screen reached")
    dut.CommitTestResult("PASSED")
else:
    logger.Error("Wrong Screen reached")
    dut.CommitTestResult("FAILED")
time.sleep(10)
######Detect Screen Change Started
resp = ScriptingLibrary.APIResponse.ResponseData()
inputParam = ScriptingLibrary.HighPrecisionValidationService.MotionParams()
#print type(inputParam)
inputParam.x_cord = 174
inputParam.y_cord = 206
inputParam.width = 587
inputParam.height = 402
inputParam.sensitivity = 5
inputParam.enableAggrassiveMode = True
lstInputParam =List[ScriptingLibrary.HighPrecisionValidationService.MotionParams]()
lstInputParam.Add(inputParam)
stepcommit="valid arguments"
expected="Motion Detected"
###############Cachecommand started
dut.controller.cacheCommand("Ok")
##########Video buffering API Started for Histogram algorithm
reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest()
reservationRequest.AlgorithmCount = 1
reservationResponse = dut.ReserveSlotForHPA(reservationRequest)
if(reservationResponse.Status):
    request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest()
    deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo()
    algorithmList =List[ScriptingLibrary.HighPrecisionValidationService.Algorithm]()
    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm()
    algorithm.Name = "Histogram"
    algorithm.Params="ewoJInJnYkRldGFpbHNMaXN0IjogW3sKCQkiciI6IDEwMCwKCQkiZyI6IDMxLAoJCSJiIjogMTQwLAoJCSJwaXhlbENvdW50VGhyZXNob2xkIjogODAKCX0sIHsKCQkiciI6IDI1NSwKCQkiZyI6IDExNiwKCQkiYiI6IDUsCgkJInBpeGVsQ291bnRUaHJlc2hvbGQiOiA4MAoJfSwgewoJCSJyIjogNDEsCgkJImciOiAxMzksCgkJImIiOiAyNiwKCQkicGl4ZWxDb3VudFRocmVzaG9sZCI6IDgwCgl9LCB7CgkJInIiOiAwLAoJCSJnIjogMTAxLAoJCSJiIjogMjU1LAoJCSJwaXhlbENvdW50VGhyZXNob2xkIjogODAKCX1dLAoJIm1hc2tEZXRhaWxzIjogewoJCSJ4Y29yZCI6IDkwMSwKCQkieWNvcmQiOiA0NzEsCgkJIndpZHRoIjogMTIxLAoJCSJoZWlnaHQiOiAxMjYKCX0KfQ=="
    algorithmList.Add(algorithm)
    time.sleep(10)
    request.Duration = 120#Duration in seconds. How many seconds the executor should record the frames.
    request.Token = reservationResponse.Data.Token
    request.Algorithms = algorithmList
    request.DeviceInfo = deviceInfo 
    response = dut.validator.StartHighPrecisionFrameAnalysis(request)
    logger.Log("Response - " + response.Data.Token)
    
    if (response.Status):
       logger.Log("TRUE")
    for i in range(0,4):
        dut.controller.sendCommand("Ok")        
    time.sleep(300)
    statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest()
    statusRequest.Token = response.Data.Token
    statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest)
    #dut.validator.StopHighPrecisionFrameAnalysis(response.Data.Token)
    logger.Log("StatusRespose - " + str(statusResponse))
    dut.CommitTestResult("PASSED")
resp = dut.validator.DetectScreenChange(100,lstInputParam)
logger.Log("Duration " + str(resp.MotionData[0].Duration))
