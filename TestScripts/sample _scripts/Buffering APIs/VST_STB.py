#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestCase ID: Video start time vrification
#Description: VSt for IR and IP stbs
#Author: Victoria and Roku stick IP STBs(DUT 7,8 and 11)
#Date:
#Version:

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr,sys,os,time
import base64
from System.Collections.Generic import List
clr.AddReference("ScriptingLibrary")
import ScriptingLibrary
dut = ScriptingLibrary.DUT()
logger = ScriptingLibrary.Logger()
chkpt = ScriptingLibrary.CheckPoint()
testResult = ScriptingLibrary.TestResult()
args = sys.argv
scriptPath = os.path.realpath(__file__)
remoteFiringType = "IR" # change IP if it DUT remote IP type

dut.Configure(args[1],args[2],args[3],args[4],scriptPath,remoteFiringType)
logger.Configure(args[1],args[2],args[3],args[4],scriptPath)

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
for i in range(0,1):
    dut.controller.sendCommand("Back")

dut.controller.sendCommand("Home")
time.sleep(10)
dut.controller.sendCommand("NowTv")
time.sleep(40)
chkpt.init("NowTv_Sports_IMG")
for i in range(0,10):
    if(dut.validator.validateCheckPoint((chkpt))):     
        logger.Log("Required Screen reached")
        ###Press right if passed to navigate to video assets
        dut.controller.sendCommand("Right")
        time.sleep(5)
        logger.Log("Starts break...")
        break
        logger.Log("Stops break...")
        dut.CommitTestResult("PASSED")
    else:
        dut.controller.sendCommand("Down")
        logger.Error("Wrong Screen reached")
        dut.CommitTestResult("FAILED")

######Detect Screen Change Started
resp = ScriptingLibrary.APIResponse.ResponseData()
inputParam1 = ScriptingLibrary.HighPrecisionValidationService.MotionParams()
#print type(inputParam)
inputParam1.x_cord = 174#905
inputParam1.y_cord = 206#494
inputParam1.width = 587#105
inputParam1.height = 402#96
inputParam1.sensitivity = 5
inputParam1.enableAggrassiveMode = True
lstInputParam =List[ScriptingLibrary.HighPrecisionValidationService.MotionParams]()
lstInputParam.Add(inputParam1)
####2nd transition includes buffering Area
inputParam2 = ScriptingLibrary.HighPrecisionValidationService.MotionParams()
inputParam2.x_cord = 174
inputParam2.y_cord = 206
inputParam2.width =  587 
inputParam2.height = 402
inputParam2.sensitivity = 5
inputParam2.enableAggressiveMode = True
lstInputParam.Add(inputParam2)
####3rnd transition 
inputParam3 = ScriptingLibrary.HighPrecisionValidationService.MotionParams()
inputParam3.x_cord = 172#722
inputParam3.y_cord = 206#636
inputParam3.width =  587#389 
inputParam3.height = 402#198
inputParam3.sensitivity = 5
inputParam3.enableAggressiveMode = True
lstInputParam.Add(inputParam3)
stepcommit="valid arguments"
expected="Motion Detected"

##########Video buffering API Started for Histogram algorithm
reservationRequest = ScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest()
reservationRequest.AlgorithmCount = 1
reservationResponse = dut.ReserveSlotForHPA(reservationRequest)
if(reservationResponse.Status):
    ##Cace command for OK key press 
    dut.controller.cacheCommand("Ok")
    response = dut.validator.DetectScreenChange(110,lstInputParam)
    sum_of_duration = 0
    count = 0
    if response is not None and response.MotionData is not None:
        for i in response.MotionData:
            count += 1
            logger.Log("Duration from DCC API >>> " + str(i.Duration))
            dut.CommitStepResult("Duration DCC!", str(i.Duration))
            sum_of_duration += i.Duration
    else:
        logger.Log("Failed to get duration")
        dut.CommitStepResult("Duration !!!", "FAILED")
    logger.Log("No: of durations calculated from response ---> "+str(count))
    logger.Log("Total duration calculated from detect screenresponse ---> "+str(sum_of_duration)) 
    request = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest()
    deviceInfo = ScriptingLibrary.HighPrecisionValidationService.DeviceInfo()
    algorithmList =List[ScriptingLibrary.HighPrecisionValidationService.Algorithm]()
    algorithm = ScriptingLibrary.HighPrecisionValidationService.Algorithm()
    algorithm.Name = "Histogram"
    algorithm.Params="ewoJInJnYkRldGFpbHNMaXN0IjogW3sKCQkiciI6IDEwMCwKCQkiZyI6IDMxLAoJCSJiIjogMTQwLAoJCSJwaXhlbENvdW50VGhyZXNob2xkIjogODAKCX0sIHsKCQkiciI6IDI1NSwKCQkiZyI6IDExNiwKCQkiYiI6IDUsCgkJInBpeGVsQ291bnRUaHJlc2hvbGQiOiA4MAoJfSwgewoJCSJyIjogNDEsCgkJImciOiAxMzksCgkJImIiOiAyNiwKCQkicGl4ZWxDb3VudFRocmVzaG9sZCI6IDgwCgl9LCB7CgkJInIiOiAwLAoJCSJnIjogMTAxLAoJCSJiIjogMjU1LAoJCSJwaXhlbENvdW50VGhyZXNob2xkIjogODAKCX1dLAoJIm1hc2tEZXRhaWxzIjogewoJCSJ4Y29yZCI6IDkwMSwKCQkieWNvcmQiOiA0NzEsCgkJIndpZHRoIjogMTIxLAoJCSJoZWlnaHQiOiAxMjYKCX0KfQ=="
    algorithmList.Add(algorithm)
    #time.sleep(10)
    request.Duration = 120#Duration in seconds. How many seconds the executor should record the frames.
    request.Token = reservationResponse.Data.Token
    request.Algorithms = algorithmList
    request.DeviceInfo = deviceInfo 
    #dut.controller.cacheCommand("Ok") 
    response = dut.validator.StartHighPrecisionFrameAnalysis(request)
    logger.Log("Response - " + response.Data.Token)    
    if (response.Status):
       logger.Log("TRUE")
    #for i in range(0,4):    
    #dut.controller.sendCommand("Ok")
    #time.sleep(2)    
    statusRequest = ScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest()
    statusRequest.Token = response.Data.Token
    statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest)
    logger.Log("Status of GetHighPrecisionFrameAnalysisResult response "+str(statusResponse.Status))
    while statusResponse.Status == 'In Progress':
        statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest)
        if statusResponse is not None and statusResponse.Data is not None and statusResponse.Data.Count > 0 and statusResponse.Status == 'Completed':
            sum_duration=0
            for data in statusResponse.Data:
                for algorithm_data in data.AlgorithmData:
                    logger.Log("Buffering Duration  returned by API -" + str(algorithm_data.Duration))
                    sum_duration += algorithm_data.Duration
        else:
            logger.Log("Failed to get duration")
    logger.Log("Total buffering duration =========> "+str(sum_duration)) 
    logger.Log("Total duration from detect screen change ---> "+str(sum_of_duration)) 
    logger.Log("Total VST duration : buffering+DCC=========> "+str(sum_of_duration+sum_duration)) 
    
    
			

