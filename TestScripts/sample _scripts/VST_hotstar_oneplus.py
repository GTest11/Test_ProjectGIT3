#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
#TestCase ID: 
#Description: 
#Author: 
#Date: 
#Version: 

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY'''''''''''''''''''' 
import clr,sys,os,time
from datetime import datetime
from System.Collections.Generic import List
clr.AddReference("MobileScriptingLibrary") 
import MobileScriptingLibrary 
dut = MobileScriptingLibrary.MobileDUT() 
logger = MobileScriptingLibrary.Logger() 
chkpt = MobileScriptingLibrary.CheckPoint() 
config = MobileScriptingLibrary.DeviceConfig()
from threading import Thread

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''' 

#''''''''''''''''''''''''''''FOR ANDROID DEVICE'''''''''''''''''''''''''''' 
config.DeviceType = "Android" 
config.AppPackage = "in.startv.hotstar" 
config.AppActivity = "in.startv.hotstar.rocky.launch.splash.SplashActivity"

args = sys.argv 
scriptPath = os.path.realpath(__file__) 
dut.Configure(args[1],args[2],args[3],args[4],scriptPath) 
logger.Configure(args[1],args[2],args[3],args[4],scriptPath) 
    
start_time = ''
constant_transition_end_time = ''
buffering_time = 0
transition_time = 0
playback_transitions = 3
playback_transitions_second_set = 3
last_transition_end_time = ''
playback_start_time = ''
playback_started = False
duration = 12

try: 

    if(dut.InitApp(config)): 
        logger.Log("App launched.") 
        time.sleep(10)

        #tapping search icon
        dut.TapElement(MobileScriptingLibrary.Constants.ElementType.Id, 'in.startv.hotstar:id/action_search')
        time.sleep(3)
        
        #entering search string
        dut.SendKeys(MobileScriptingLibrary.Constants.ElementType.Id, 'in.startv.hotstar:id/search_text', 'Hulk Cookies')
        time.sleep(3)

#        #selecting ist item from the search result
#        dut.Tap(296, 360)
#        time.sleep(3)

    def calculate_screen_transition_time():
        global start_time
        global constant_transition_end_time
        global transition_time
        global last_transition_end_time
        global duration
        constant_transitions = 21
        input_param_arg =List[MobileScriptingLibrary.HighPrecisionValidationService.MotionParams]()
        input = MobileScriptingLibrary.HighPrecisionValidationService.MotionParams()

        #coordinates for cross-hair detection, while tapping to playback
    #    input.x_cord = 160#7
    #    input.y_cord = 2#1190
    #    input.width = 150#450
    #    input.height = 16#300
    #    input.sensitivity = 2
    #    input.enableAggressiveMode = True
    #    input_param_arg.Add(input)

        #cross-hair detection not working, monitoring the search area after tapping for playback
        input.x_cord = 0#7
        input.y_cord = 150#42#1190
        input.width = 640#450
        input.height = 60#300
        input.sensitivity = 1
        input.enableAggressiveMode = True
        input_param_arg.Add(input)
        
        input_param_name_list = []
        #expected no: of transitions in the provided area is 3, after which, black-screen is obtained
        for i in range(constant_transitions + playback_transitions + playback_transitions_second_set):
            input_param_name = '_'+str(i)+'inputParam'
            input_param_name_list.append(input_param_name)
            logger.Log("logMessage"+str(input_param_name))

        for input in input_param_name_list:
            index = input_param_name_list.index(input)
            input = MobileScriptingLibrary.HighPrecisionValidationService.MotionParams()
            #playback area coordinate which doesn't fall under cross-hair detection area or buffering icon
            input.x_cord = 374#11
            input.y_cord = 88#134
            input.width = 257#182
            input.height = 191#175
            input.sensitivity = 2
            input_param_arg.Add(input) 

        tapData = MobileScriptingLibrary.Models.TapData()
        tapData.x_Cord = 296
        tapData.y_Cord = 360
        tapDataList = List[MobileScriptingLibrary.Models.TapData]()
        tapDataList.Add(tapData)

        duration = duration
        response = dut.validator.GetScreenTransitions(dut,duration,input_param_arg, tapDataList)

        sum_of_duration = 0
        transitions = 0
        playback_transition_start_time = playback_transition_end_time = playback_transition_second_end_time = ''
        if response is not None and response.MotionData is not None:
            for i in response.MotionData:
                if transitions == 0:
                    start_time = i.TimeStamp
                elif transitions == constant_transitions:
                    constant_transition_end_time = i.TimeStamp
                elif transitions == constant_transitions + 1:
                    playback_transition_start_time = i.TimeStamp
                elif transitions == constant_transitions + playback_transitions:
                    playback_transition_end_time = i.TimeStamp
                elif transitions == constant_transitions + playback_transitions + playback_transitions_second_set:
                    playback_transition_second_end_time = i.TimeStamp
                
                logger.Log("Duration obtained from GetScreenTransitions API >>> " + str(i.Duration))
                dut.CommitStepResult("Duration Obtained!", str(i.Duration))
                sum_of_duration += i.Duration
                transitions += 1
            if playback_transition_start_time == '' or playback_transition_end_time == '':
                logger.Error('Failed to obtain expected playback transition')
            else:
                if not check_if_playback_started(playback_transition_start_time, playback_transition_end_time):
                    if playback_transition_second_end_time == '':
                        logger.Error('Failed to obtain expected playback transition')
                    else:
                        check_if_playback_started(playback_transition_end_time, playback_transition_second_end_time)
        else:
            logger.Log("Failed to get duration")

        transition_time = sum_of_duration
        logger.Log("-----------------------------------------------------------")
        logger.Log("Total duration calculated from GetScreenTransitions ---> " + str(sum_of_duration))
        logger.Log("-----------------------------------------------------------")

    def calculate_buffering_time():
        global constant_transition_end_time
        global buffering_time
        global duration
        reservationRequest = MobileScriptingLibrary.HighPrecisionValidationService.SlotReservationRequest() 
        reservationRequest.AlgorithmCount = 1 
        reservationResponse = dut.ReserveSlotForHPA(reservationRequest)

        if reservationResponse.Status:
            request = MobileScriptingLibrary.HighPrecisionValidationService.VideoAnalysisRequest() 
            deviceInfo = MobileScriptingLibrary.HighPrecisionValidationService.DeviceInfo() 
            algorithmList =List[MobileScriptingLibrary.HighPrecisionValidationService.Algorithm]() 

    #        algorithm = MobileScriptingLibrary.HighPrecisionValidationService.Algorithm() 
    #        algorithm.Name = "HoughCircle"
    #        #detect buffering icon (hough circle in oneplus 5T)
    #        algorithm.Params = "ewogICJtYXNrRGV0YWlscyI6IHsKICAgICJ4Y29yZCI6IDI4MSwKICAgICJ5Y29yZCI6IDE4MCwKICAgICJ3aWR0aCI6IDc4LAogICAgImhlaWdodCI6IDc2CiAgfSwKICAiY2lyY2xlVGhyZXNob2xkcyI6IHsKICAgICJjaXJjbGVQZXJjZW50YWdlTG93TGltaXQiOiAzMCwKICAgICJjaXJjbGVQZXJjZW50YWdlVXBMaW1pdCI6IDkzLAogICAgImNpcmNsZVJhZGl1c0xvd0xpbWl0IjogMzUsCiAgICAiY2lyY2xlUmFkaXVzVXBMaW1pdCI6IDQ1LAogICAgImNpcmNsZUNlbnRlclhPZmZzZXQiOiA0Ny40LAogICAgImNpcmNsZUNlbnRlcllPZmZzZXQiOiAzNS40LAogICAgImNpcmNsZUNlbnRlcldpZHRoIjogMzAsCiAgICAiY2lyY2xlQ2VudGVySGVpZ2h0IjogMzAKICB9LAogICJtaXNjVGhyZXNob2xkcyI6IHsKICAgICJjYW5ueVRocmVzaG9sZDEiOiA3NSwKICAgICJjYW5ueVRocmVzaG9sZDIiOiAxMDAsCiAgICAiaG91Z2hEcCI6IDEuMiwKICAgICJob3VnaE1pbkRpc3QiOiA2MC4wLAogICAgImhvdWdoUGFyYW0xIjogODAuMCwKICAgICJob3VnaFBhcmFtMiI6IDM3LjAsCiAgICAiZGlzdFRyYW5zZm9ybUZpbHRlckRpc3QiOiAzCiAgfQp9"
    #        algorithmList.Add(algorithm)

            algorithm = MobileScriptingLibrary.HighPrecisionValidationService.Algorithm() 
            algorithm.Name = "HoughCircle"
            #buffering icon using houghcircle, hotstar, oneplus5T
            algorithm.Params = "ewogICJtYXNrRGV0YWlscyI6IHsKICAgICJ4Y29yZCI6IDI3NiwKICAgICJ5Y29yZCI6IDEzNCwKICAgICJ3aWR0aCI6IDg1LAogICAgImhlaWdodCI6IDg2CiAgfSwKICAiY2lyY2xlVGhyZXNob2xkcyI6IHsKICAgICJjaXJjbGVQZXJjZW50YWdlTG93TGltaXQiOiAzMCwKICAgICJjaXJjbGVQZXJjZW50YWdlVXBMaW1pdCI6IDk5LAogICAgImNpcmNsZVJhZGl1c0xvd0xpbWl0IjogMzAsCiAgICAiY2lyY2xlUmFkaXVzVXBMaW1pdCI6IDM3LAogICAgImNpcmNsZUNlbnRlclhPZmZzZXQiOiA0NCwKICAgICJjaXJjbGVDZW50ZXJZT2Zmc2V0IjogNDUsCiAgICAiY2lyY2xlQ2VudGVyV2lkdGgiOiAzMC4wLAogICAgImNpcmNsZUNlbnRlckhlaWdodCI6IDMwLjAKICB9LAogICJtaXNjVGhyZXNob2xkcyI6IHsKICAgICJjYW5ueVRocmVzaG9sZDEiOiAzMCwKICAgICJjYW5ueVRocmVzaG9sZDIiOiAxMDAsCiAgICAiaG91Z2hEcCI6IDEuNCwKICAgICJob3VnaE1pbkRpc3QiOiAzMC4wLAogICAgImhvdWdoUGFyYW0xIjogOTAuMCwKICAgICJob3VnaFBhcmFtMiI6IDM3LjAsCiAgICAiZGlzdFRyYW5zZm9ybUZpbHRlckRpc3QiOiAzCiAgfQp9"
            algorithmList.Add(algorithm)

            request.Duration = 20
            request.Token = reservationResponse.Data.Token 
            request.Algorithms = algorithmList 
            request.DeviceInfo = deviceInfo

            response = dut.validator.StartHighPrecisionFrameAnalysis(request) 
            # to start playback, selecting 1st among the listed search results
            dut.Tap(288, 393)
            

            statusRequest = MobileScriptingLibrary.HighPrecisionValidationService.VideoAnalysisStatusRequest() 
            statusRequest.Token = response.Data.Token 
            statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest) 

            sum_of_buffering_duration = 0
            while statusResponse.Status == 'In Progress':
                logger.Log("Status of HPA is 'In Progress', so sleeping for 3 seconds and fetching results again")
                time.sleep(3)
                statusResponse = dut.validator.GetHighPrecisionFrameAnalysisResult(statusRequest)

            if statusResponse is not None and statusResponse.Data is not None:
                for data in statusResponse.Data:
                    for algorithm_data in data.AlgorithmData:
                        logger.Log("Duration obtained from API ****** " + str(algorithm_data.Duration))
                        if constant_transition_end_time == '':
                            logger.Error("End time not obtained for the last screen transition detected. Hence, "
                                         "buffering time won't be added up")
                            # Buffering time need not be considered, since screen transitions elapsed the entire time
                            sum_of_buffering_duration = 0
                        else:
                            start_of_buffer = datetime.strptime(algorithm_data.StartTime, '%Y-%m-%d %H:%M:%S.%f')
                            transitions_end = datetime.strptime(constant_transition_end_time, '%Y-%m-%d %H:%M:%S.%f')
                            if start_of_buffer > transitions_end:
                                sum_of_buffering_duration += algorithm_data.Duration
                                logger.Log('Adding up buffering duration of '+str(algorithm_data.Duration)+
                                           ' since it falls before the end of constant transitions')
            else:
                logger.Log("Failed to get duration")
            buffering_time = sum_of_buffering_duration
            logger.Log("-----------------------------------------------------------")
            logger.Log("********* Total Buffering duration calculated *********"+str(sum_of_buffering_duration))
            logger.Log("-----------------------------------------------------------")

    
    def check_if_playback_started(start_time, end_time):
        global playback_started
        global playback_start_time
        diff = calc_time_diff_in_ms(start_time, end_time)
        if diff < 150:
            playback_started = True
            playback_start_time = start_time
            logger.Log("------------------Playback Started at ------------- "+str(start_time))
        else:
            logger.Log("------------------Playback Not Started-----------------------------------------")

    def calc_time_diff_in_ms(start_time, end_time):
        start = datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S.%f')
        end = datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S.%f')
        start_in_ms = (time.mktime(start.timetuple()) + start.microsecond/1000000.0) * 1000
        end_in_ms = (time.mktime(end.timetuple()) + end.microsecond/1000000.0) * 1000
        return end_in_ms - start_in_ms

    def calculate_VST():
        global transition_time
        global buffering_time
        global playback_started
        if playback_started:
            logger.Log("////////////////Playback detected as generalized/////////////////")
            vst = calc_time_diff_in_ms(start_time, playback_start_time)
            dut.CommitTestResult("PASSED")
        else:
            logger.Log("////////Failed to detect Playback as per the generalized No: of constant transitions//////////")
            vst = transition_time + buffering_time
        logger.Log("****************************************")
        logger.Log("VIDEO STARTUP TIME CALCULATED :- " + str(vst))
        logger.Log("****************************************")
        dut.CommitStepResult("VIDEO STARTUP TIME", str(vst))
    t1 = Thread(target = calculate_screen_transition_time)
    t2 = Thread(target = calculate_buffering_time)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    Thread(target = calculate_VST).start()
    
finally: 
    #dut.Stop() 
    pass
#'''''''''''''''''''''''''END AUTOGENERATED CODE''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
