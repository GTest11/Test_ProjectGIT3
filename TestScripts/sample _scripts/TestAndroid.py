#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#Description   : Check whether the You tube lauch is working & video is playing
#Date          : 23 Jan 2018
#FE_Version    : 5.0.7
#Author        : Arathy P S
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr, sys, os, time, re,timeit
clr.AddReference("MobileScriptingLibrary")
import MobileScriptingLibrary
dut = MobileScriptingLibrary.MobileDUT()
logger = MobileScriptingLibrary.Logger()
scriptPath = os.path.realpath(__file__)
args = sys.argv
dut.Configure(args[1],args[2],args[3],args[4],scriptPath)
logger.Configure(args[1],args[2],args[3],args[4],scriptPath)
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

chkpt = MobileScriptingLibrary.CheckPoint()
config = MobileScriptingLibrary.DeviceConfig()
config.DeviceType = "Android"

#NowTV
#config.AppPackage = "com.bskyb.nowtv.beta"
#config.AppActivity = "com.nowtv.view.activity.StartupActivity"
#
#youtube
config.AppPackage = "com.google.android.youtube"
config.AppActivity = "com.google.android.youtube.HomeActivity"
config.CreateNewServer = "true"
#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#variables

dut.InitApp(config) 
for i in range(0,3):  
    time.sleep(5)
    chkpt.init("CheckpointPatternSingleOccurance")
    if(dut.validator.validateCheckPoint((chkpt))):
        "Passed"
    else:
        "Failed" 





#chkpt.init("CheckPointName")
#if(dut.validator.WaitCheckPointMatch(chkpt,timeToWait,waitGap)):
     #"statement(s)"
#else:
     #"statement(s)"
#chkpt.init("valIcPixelSkyHome")
#if(dut.validator.WaitCheckPointMatch(chkpt,5,20)):
     #logger.Log("Test case Passed")
#else:
     #logger.Log("Test case Failed")

#video_x = 10
#video_y = 80
#video_w = 500
#video_h = 200
#timeout = 20
#waitGap = 5
#tolerance = "10"
#tap_x = 500#241
#tap_y = 500#370

##############ImageSearch#############################
APIResponse = MobileScriptingLibrary.ImageComparisonService.Response()
#Provide valid parameters
checkpointName="CheckpointPatternSingleOccurance"
x = 255#124
y = 75#272
width = 127#679
height = 107#421
algorithm = 1
percentMatchThreshold = 97
if (dut.InitApp(config)):
    time.sleep(30)
    imageName = "refimage"
    imageformat ="png"
    imagePath = dut.validator.QuickCaptureEx(imageName,imageformat)
    logger.Log("imagePath : "+imagePath)
    logger.Log("imageFormat : "+imageformat) 
    dut.validator.StartCaptureZapFrames(30)
#Initiate the action to be performed on the box 
    if(dut.validator.WaitColorMatch("[254,0,3]",37,82,15,24,20,25,"[10, 10, 10]",90)):
        logger.Log("Passed")
    else:
        logger.Log("failed")
    dut.validator.StopCaptureZapFrames()
    #start_time = datetime.now()
    APIResponse = dut.validator.ImageSearch(checkpointName, x, y, width, height, algorithm, percentMatchThreshold)
    #end_time=datetime.now()
    #print('Duration: {}'.format(end_time - start_time))
    logger.Log("Status is :"+str(getattr(APIResponse,'OpStatus')))
    logger.Log("Match percentage is: "+str(getattr(APIResponse,'MatchPercentage')))
    logger.Log("Remarks is:"+str(getattr(APIResponse,'Remarks')))
    logger.Log("MatchRegion is:"+str(getattr(APIResponse,'MatchRegion')))
    dut.CloseApp()
    dut.Stop()
########################imageSearch#########################

#if(dut.InitApp(config)):
    #time.sleep(20) 
    #APIResponse =  MobileScriptingLibrary.Models.ResponseData()
    #APIResponse = dut.SendAppToBackground(10) 
    #time.sleep(5)  
    #chkpt = "chkpt_youtube"
    #dut.validator.StopCaptureZapFrames()
    #if(dut.validator.StartCaptureZapFrames(10)):
        #imagepath=dut.validator.QuickCapture("image")
        #wait_time = dut.validator.WaitForCheckpoint(chkpt, 20, -1)
        #if(wait_time > 0):
            #logger.Log("time:" + str(wait_time))
            #logger.Log("Test case passed")
            #dut.CommitStepResult("Wait time",str(wait_time))
            #dut.CommitTestResult("PASSED")
        #else:
            #dut.CommitTestResult("FAILED")
            #logger.Log("Test case failed")
        #dut.validator.StopCaptureZapFrames()
    #else:
        #dut.CommitTestResult("ERROR")
        #logger.Log("Unable to start frame capture") 
#else:
    #dut.CommitTestResult("ERROR")
    #logger.Log("InitApp API Failed")  
#dut.CloseApp()
#dut.Stop()
#
##'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#
##DetectMotion Ex Testing for Android with click on the element
#def main():
    #try:
        #dut.InitApp(config)
        ##dut.Unlock()
        #name1 = dut.validator.QuickCapture("test9")
        #time.sleep(5)    
        #chkpt.init("Mobile_YouTube")
        #if(dut.validator.validateCheckPoint((chkpt))):
            ##dut.CommitStepResult("YouTube Launch","PASSED")              
            #logger.Log("YouTube App has launched successfully")
            #time.sleep(5)
            #if(dut.Click(MobileScriptingLibrary.Constants.ElementType.ClassName,"android.widget.ImageView",2)):
                #dut.CommitStepResult("Click on Search","PASSED")
                #time.sleep(10)                
                #dut.SendKeys(MobileScriptingLibrary.Constants.ElementType.Id, "com.google.android.youtube:id/search_edit_text","MasterChef Australia")
                #time.sleep(10)
                #dut.SendAndroidKeyCode ("Keycode_ENTER")
                #time.sleep(30)   
                #dut.Tap(tap_x, tap_y)
                ##dut.Click(MobileScriptingLibrary.Constants.ElementType.XPath,"//android.widget.TextView [@text='MasterChef Australia S03E13']")
                #time.sleep(10) 
                ## checking motion detection after youtube launch
                #if(dut.validator.DetectMotionEx(video_x,video_y,video_w,video_h,timeout,tolerance)):
                    #logger.Log("Playing MasterChef Australia")
                    #dut.CommitTestResult("PASSED")
                    #dut.Click(MobileScriptingLibrary.Constants.ElementType.Id,"com.google.android.youtube:id/offline_button")
                    #time.sleep(5)
                    #dut.Click(MobileScriptingLibrary.Constants.ElementType.XPath,"//android.widget.Button[@text='OK']")
                    #time.sleep(2) 
                    #dut.Click(MobileScriptingLibrary.Constants.ElementType.XPath,"//android.widget.Button[@text='DELETE']") 
                    #time.sleep(2)
                    #dut.Click(MobileScriptingLibrary.Constants.ElementType.XPath,"//android.widget.Button[@text='STOP']")
                    #time.sleep(2)
                    #name = dut.validator.QuickCapture("image")
                    #logger.Log("image name " + name)
                    #time.sleep(10) 
                    ##dut.HandleAlertMessage("Accept")
                    ##time.sleep(5)
                    #APIResponse =  MobileScriptingLibrary.Models.ResponseData() 
                    #APIResponse = dut.SendAppToBackground(60)
                    #time.sleep(100)
                    #name = dut.validator.QuickCapture("image1")
                    #logger.Log("image name " + name1)                    
                #else:                    
                    #logger.Log("Unable to Play MasterChef Australia")
                    #dut.CommitTestResult("FAILED")
            #else:
                #dut.CommitStepResult("Click on Search","FAILED")
        #else:
            #logger.Log("YouTube App launch failed")
            ##dut.CommitStepResult("YouTube Launch","FAILED")
    #except:
        #logger.Log("Exception raised in main function.")
        #dut.CommitTestResult("ERROR")
    #finally:
        #time.sleep(10)
        #dut.CloseApp()
        ##dut.Stop()
#
#if __name__ == "__main__":
    #main()  
##'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''