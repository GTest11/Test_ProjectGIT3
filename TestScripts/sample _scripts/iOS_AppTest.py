# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
# TestCase ID:
# Description:
# Author:
# Date:
# Version:

# ''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr
import sys
import os
import time
from datetime import datetime
clr.AddReference("MobileScriptingLibrary")
import MobileScriptingLibrary
dut = MobileScriptingLibrary.MobileDUT()
logger = MobileScriptingLibrary.Logger()
scriptPath = os.path.realpath(__file__)
args = sys.argv
dut.Configure(args[1], args[2], args[3], args[4], scriptPath)
logger.Configure(args[1], args[2], args[3], args[4], scriptPath)
chkpt = MobileScriptingLibrary.CheckPoint()
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# configure now tv app
config = MobileScriptingLibrary.DeviceConfig()
config.DeviceType = "iOS"
config.PlatformName = "iOS"
config.AppName = "com.google.ios.youtube"
# config.AppPackage = "com.bskyb.nowtv.beta"
# config.AppActivity = "com.bskyb.nowtv.ui.activities.LaunchActivity"

# ''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
# ''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

# '''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
# ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

chkpt.init("Image_SanityIos")
if(dut.validator.validateCheckPoint((chkpt))):
    "Passed"
else:
    "Failed"

# x=10
# y=23
# w=45
# h=56
#
jpegQuality = 100
#str_url = "Redmi"
#dut.IsSelected(ElementType,"ElementId")
#chkpt.init("CheckPointName")
#dut.validator.SetActiveFrameSource(str_url)#Available only for mobile devices

#if M_dut.validator.SetActiveFrameSource(str_url):
#    M_dut.validator.QuickCapture("test")

dut.InitApp(config)
time.sleep(30)
start_time = datetime.now()
dut.GetDeviceWidth()
end_time=datetime.now()
print('Duration1: {}'.format(end_time - start_time))
start_time = datetime.now()
dut.GetDeviceHeight()
end_time=datetime.now()
print('Duration2: {}'.format(end_time - start_time))
start_time = datetime.now()
dut.GetWidth(MobileScriptingLibrary.Constants.ElementType.XPath, "//XCUIElementTypeImage[@name='youtube_logo']")
end_time=datetime.now()
print('Duration3: {}'.format(end_time - start_time))
start_time = datetime.now()
dut.GetHeight(MobileScriptingLibrary.Constants.ElementType.XPath, "//XCUIElementTypeImage[@name='youtube_logo']")
end_time=datetime.now()
print('Duration4: {}'.format(end_time - start_time))
dut.CloseApp()

startY = 419
endY = 1345
X = 405
duration = 5
tap_x = 0
tap_y = 178
video_x = 10
video_y = 72
video_w = 375
video_h = 106
timeout = 20
#waitGap = 5
tolerance = "10"
imageName = "test"
imageformat ="BMP"
str_url_list = ["Redmi","Camera1","21435","STB"]
if (dut.InitApp(config)):
    for i in str_url_list:
        #start_time = datetime.now()
        #print start_time
        dut.validator.SetActiveFrameSource(i)
        name = dut.validator.QuickCaptureEx(imageName,imageformat)
        #end_time=datetime.now()
        #Duration=end_time - start_time
        #print('Duration2: {}'.format(end_time - start_time))
        logger.Log("image name :" +str(name))
        #dut.CommitStepResult("Time",str(Duration))
    dut.CloseApp()
    dut.Stop()

# if(dut.validator.DetectMotion(200, 125, 286, 184, timeout, waitGap, tolerance)):
# logger.Log("Playing the video")
# dut.CommitTestResult("PASSED")
# else:
# logger.Log("Unable to Play the video")
# dut.ChangeOrientation()
imageName = "test"
imageformat ="TPP"
str_url_list = ["Redmi","Camera1","21435","STB"]
dut.InitApp(config)
imagePath = dut.validator.QuickCaptureEx(imageName,imageformat)
time.sleep(30)
if(dut.Tap(tap_x, tap_y)):
    time.sleep(5)
    dut.Tap(10, 20)
    time.sleep(5)
    #dut.SetOrientation("Landscape")
    #Orientation = dut.GetOrientation()
    #logger.Log("Orientation 1 : " + Orientation)
    #imagePath1 = dut.validator.QuickCapture("BeforeChangeOrientation")
    dut.ChangeOrientation()
    #Orientation = dut.GetOrientation()
    #logger.Log("Orientation 2 : " + Orientation)
    #imagePath2 = dut.validator.QuickCapture("AfterChangeOrientation")
     
    imagePath = dut.validator.QuickCaptureEx(imageName,imageformat)
    if(dut.validator.DetectMotionEx(130, 10, 478, 175, timeout, tolerance)):
        #logger.Log("Playing the video")
        dut.CommitTestResult("PASSED")

    else:
        logger.Log("Unable to Play the video")
        #dut.ChangeOrientation()
else:
    dut.CommitStepResult("Tap API", "API Failed")
    dut.CommitTestResult("FAILED")
    time.sleep(5)
dut.CloseApp()
dut.Stop()