# -*- coding: utf-8 -*- 
#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
#TestCase ID: 
#Description: 
#Author: 
#Date: 
#Version: 

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY'''''''''''''''''''' 
import clr,sys,os,time 
clr.AddReference("MobileScriptingLibrary") 
import MobileScriptingLibrary 
dut = MobileScriptingLibrary.MobileDUT() 
logger = MobileScriptingLibrary.Logger() 
chkpt = MobileScriptingLibrary.CheckPoint() 
config = MobileScriptingLibrary.DeviceConfig() 

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''' 

#''''''''''''''''''''''''''''''FOR iOS DEVICE'''''''''''''''''''''''''''''' 
#config.DeviceType = "iOS" 
#config.AppName = "com.google.ios.youtube" 


#''''''''''''''''''''''''''''FOR ANDROID DEVICE'''''''''''''''''''''''''''' 
config.DeviceType = "Android" 
config.AppPackage = "com.google.android.youtube" 
config.AppActivity = ".HomeActivity" 

args = sys.argv 
scriptPath = os.path.realpath(__file__) 
dut.Configure(args[1],args[2],args[3],args[4],scriptPath) 
logger.Configure(args[1],args[2],args[3],args[4],scriptPath) 
       
try: 
    if(dut.InitApp(config)): 
        logger.Log("App launched.") 
    
    search_access_id = 'Search'
    search_id = 'com.google.android.youtube:id/search_edit_text'
    ms1 = time.time()*1000.0
    ret = dut.Click(MobileScriptingLibrary.Constants.ElementType.AccessibilityID, search_access_id)
    ms2 = time.time()*1000.0

    logger.Log("Time taken for Click API is >>>> "+str(ms2-ms1))
    logger.Log("Ret value of the API is >>>> "+str(ret))

    time.sleep(2)
    ms1 = time.time()*1000.0
    ret = dut.SendKeys(MobileScriptingLibrary.Constants.ElementType.Id, search_id, "Learn German Words")
    ms2 = time.time()*1000.0

    logger.Log("Time taken for SendKeys API is >>>> "+str(ms2-ms1))
    logger.Log("Ret value of the API is >>>> "+str(ret))
    dut.Tap(308, 250)
    time.sleep(2)
    ret = dut.Swipe(250, 1250, 250, 5)
    time.sleep(4)

#WaitOCRMatch
    refText="bitte"
    x_coordinate=149
    y_coordinate=439
    width=57
    height=44
    timeToWait=20
    waitGap=5
    language="deu"
    filters = "Greyscale;Contrast:16"
    #filters="Greyscale"
    #filters = ''
    compType= 1
    accuracy= 92
    if(dut.validator.StartCaptureZapFrames(30)):
        matchTime = dut.validator.WaitOCRMatch(refText,x_coordinate, y_coordinate, width, height,timeToWait,waitGap,language,filters,compType,accuracy)
        if(matchTime > -1):
            logger.Log("German ---- time:" + str(matchTime))
            logger.Log("German ---- Test case passed")
            dut.CommitTestResult("Passed")
        else:
            logger.Log("German ---- Test case failed")
            dut.CommitTestResult("Failed")
        dut.validator.StopCaptureZapFrames()
    else:
        logger.Log("Unable to start frame capture")
#    
#    
#    imagePath = dut.validator.QuickCapture("tstttt1")
    
    dut.validator.StopCaptureZapFrames()
    # WaitForCheckpoint
    #checkpoints = ['lr_test_german_text', 'lr_test_german_text_1', 'lr_german_mult_filter', 'lr_german_multi_line']
    checkpoints = ['lr_test_german_text_5']
    for checkpoint in checkpoints:
        logger.Log("------"+str(checkpoint)+"------")
        checkpName=checkpoint
        timeToWait = 20
        initialDelay = 1 #should be >=0
        time.sleep(2)
        if(dut.validator.StartCaptureZapFrames(20)):
           #key presses or other code
           time_out = dut.validator.WaitForCheckpoint(checkpName, timeToWait, initialDelay)
           if(time_out > -1):
               logger.Log("WaitForCheckpoint(German) ---- time:" + str(time_out))
               logger.Log("WaitForCheckpoint(German) passed")
           else:
               logger.Log("WaitForCheckpoint(German) failed")
           dut.validator.StopCaptureZapFrames()
        else:
           logger.Log("Unable to start frame capture")

    dut.validator.StopCaptureZapFrames()
#getOCRText
    x_coordinate=149
    y_coordinate=439
    width=57
    height=44
    filters = "Greyscale;Contrast:23"
    #filters = ''
    language = "deu"
    ocr_output = dut.validator.getOCRText(x_coordinate, y_coordinate, width, height, filters, language)
    logger.Log("getOCRText(German) output string : " + ocr_output)
    if ocr_output == 'bitte' or ocr_output == 'Es tut mir leid':
        logger.Log("getOCRText(German) Passed!!!")
    else:
        logger.Log("getOCRText(German) Failed!!!")


# validateCheckPoint
    #checkpoints = ['lr_test_german_text', 'lr_german_mult_filter', 'lr_german_multi_line']
    checkpoints = ['lr_test_german_text_5']
    for checkpoint in checkpoints:
        checkp = checkpoint
        chkpt.init(checkp)
        if(dut.validator.validateCheckPoint((chkpt))):
            logger.Log("ValidateCheckPoint(German) ---- Passed")
        else:
            logger.Log("ValidateCheckPoint(German) ---- Failed")



        
# WaitCheckPointMatch
    checkpName = "lr_test_german_text_5" # provide valid checkpoint name
    chkpt.init(checkpName)
    timeToWait=30
    waitGap=5
    if(dut.validator.WaitCheckPointMatch( chkpt,timeToWait,waitGap)):
        logger.Log("WaitCheckPointMatch -- German Success")
    else:
        logger.Log("WaitCheckPointMatch -- German Failued!!!")

finally: 
    #dut.Stop() 
    dut.validator.StopCaptureZapFrames()
    pass

#'''''''''''''''''''''''''END AUTOGENERATED CODE''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
