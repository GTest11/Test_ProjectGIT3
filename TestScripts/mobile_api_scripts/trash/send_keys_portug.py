# -*- coding: utf-8 -*- 
#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
#TestCase ID: 
#Description: 
#Author: 
#Date: 
#Version: 

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY'''''''''''''''''''' 
import clr,sys,os,time 
clr.AddReference("MobileScriptingLibrary") 
import MobileScriptingLibrary 
dut = MobileScriptingLibrary.MobileDUT() 
logger = MobileScriptingLibrary.Logger() 
chkpt = MobileScriptingLibrary.CheckPoint() 
config = MobileScriptingLibrary.DeviceConfig() 

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''' 

#''''''''''''''''''''''''''''''FOR iOS DEVICE'''''''''''''''''''''''''''''' 
#config.DeviceType = "iOS" 
#config.AppName = "com.google.ios.youtube" 


#''''''''''''''''''''''''''''FOR ANDROID DEVICE'''''''''''''''''''''''''''' 
config.DeviceType = "Android" 
config.AppPackage = "com.google.android.youtube" 
config.AppActivity = ".HomeActivity" 

args = sys.argv 
scriptPath = os.path.realpath(__file__) 
dut.Configure(args[1],args[2],args[3],args[4],scriptPath) 
logger.Configure(args[1],args[2],args[3],args[4],scriptPath) 
       
try: 
    if(dut.InitApp(config)): 
        logger.Log("App launched.") 
    
    search_access_id = 'Search'
    search_id = 'com.google.android.youtube:id/search_edit_text'
    ms1 = time.time()*1000.0
    ret = dut.Click(MobileScriptingLibrary.Constants.ElementType.AccessibilityID, search_access_id)
    ms2 = time.time()*1000.0

    logger.Log("Time taken for Click API is >>>> "+str(ms2-ms1))
    logger.Log("Ret value of the API is >>>> "+str(ret))

    time.sleep(2)
    ms1 = time.time()*1000.0
    #ret = dut.SendKeys(MobileScriptingLibrary.Constants.ElementType.Id, search_id, "Learn Portuguese Words")
    ret = dut.SendKeys(MobileScriptingLibrary.Constants.ElementType.Id, search_id, "Learn Portuguese: 500 Basic")
    ms2 = time.time()*1000.0

    logger.Log("Time taken for SendKeys API is >>>> "+str(ms2-ms1))
    logger.Log("Ret value of the API is >>>> "+str(ret))
    dut.Tap(308, 250)
    time.sleep(3)
#    ret = dut.Swipe(250, 1250, 250, 5)
#    time.sleep(2)
#    ret = dut.Swipe(250, 1250, 250, 5)
#    time.sleep(2)
#    ret = dut.Swipe(250, 1250, 250, 5)
#    time.sleep(2)
#    italian_text = MobileScriptingLibrary.CheckPoint()
#    italian_text.init("lr_test_italian_text")
#    if(dut.validator.validateCheckPoint((italian_text))):
#        logger.Log("Checkpoint validation Simple Italian Text - Success!!!")
#    else:
#        logger.Log("Checkpoint validation Simple Italian Text - Failure!!!")


#    italian_text = MobileScriptingLibrary.CheckPoint()
#    time.sleep(2)
#    italian_text.init("lr_italian_mult_filter")
#    if(dut.validator.validateCheckPoint((italian_text))):
#        logger.Log("Checkpoint validation Multiple filter Italian Text - Success!!!")
#    else:
#        logger.Log("Checkpoint validation Multiple filter Italian Text - Failure!!!")

#    
#    italian_text = MobileScriptingLibrary.CheckPoint()
#    time.sleep(2)
#    italian_text.init("lr_italian_multi_line")
#    if(dut.validator.validateCheckPoint((italian_text))):
#        logger.Log("Checkpoint validation Multi Line Italian Text - Success!!!")
#    else:
#        logger.Log("Checkpoint validation Multi Line Italian Text - Failure!!!")
    
#    dut.validator.StopCaptureZapFrames()
##WaitOCRMatch
#    refText="o que quer fazer"
#    x_coordinate=116
#    y_coordinate=728
#    width=132
#    height=25
#    timeToWait=20
#    waitGap=5
#    language="por"
#    filters = "Greyscale;Contrast:16"
#    #filters=""
#    compType= 1
#    accuracy= 92
#    if(dut.validator.StartCaptureZapFrames(20)):
#        matchTime = dut.validator.WaitOCRMatch(refText,x_coordinate, y_coordinate, width, height,timeToWait,waitGap,language,filters,compType,accuracy)    
#        if(matchTime > -1):
#            logger.Log("Portuguese ---- time:" + str(matchTime))
#            logger.Log("Portuguese ---- Test case passed")
#            dut.CommitTestResult("Passed")
#        else:
#            logger.Log("Portuguese ---- Test case failed")
#            dut.CommitTestResult("Failed")
#        dut.validator.StopCaptureZapFrames()
#    else:
#        logger.Log("Unable to start frame capture")

    #dut.validator.StopCaptureZapFrames()
# WaitForCheckpoint
#    checkpoints = ['lr_test_portug_text', 'lr_portug_mult_filter']
##, 'lr_portug_multi_line'
#    for checkpoint in checkpoints:
#        checkpName=checkpoint
#        timeToWait = 20
#        initialDelay = 1 #should be >=0
#        time.sleep(5)
#        if(dut.validator.StartCaptureZapFrames(20)):
#            #key presses or other code
#            out_time = dut.validator.WaitForCheckpoint(checkpName, timeToWait, initialDelay)
#            logger.Log("WaitForCheckpoint(Portuguese) ---- time:" + str(out_time))
#            if(out_time > -1):
#                logger.Log("WaitForCheckpoint(Portuguese) passed")
#            else:
#                logger.Log("WaitForCheckpoint(Portuguese) failed")
#            dut.validator.StopCaptureZapFrames()
#        else:
#            logger.Log("Unable to start frame capture")



#getOCRText
#    x_coordinate=116
#    y_coordinate=728
#    width=132
#    height=25
#    filters = ''
#    language = "por"
#    ocr_output = dut.validator.getOCRText(x_coordinate, y_coordinate, width, height, filters, language)
#    logger.Log("getOCRText(Portuguese) output string : " + ocr_output)
#    #if ocr_output == 'O que você fez nesta manhã' or ocr_output == 'o que você fez nesta manhã':
#    if ocr_output == 'o que quer fazer':
#        logger.Log("getOCRText(Portuguese) Passed!!!")
#    else:
#        logger.Log("getOCRText(Portuguese) Failed!!!")


## validateCheckPoint
    checkpoints = ['lr_test_portug_text', 'lr_portug_mult_filter']
    #, 'lr_portug_multi_line'
    for i in range(10):
        for checkpoint in checkpoints:
            checkp = checkpoint
            chkpt.init(checkp)
            if(dut.validator.validateCheckPoint((chkpt))):
                logger.Log("ValidateCheckPoint(Potuguese) ---- Passed")
            else:
                logger.Log("ValidateCheckPoint(Potuguese) ---- Failed")

# WaitCheckPointMatch
#    checkpName = "lr_portug_mult_filter" # provide valid checkpoint name
#    chkpt.init(checkpName)
#    timeToWait=20
#    waitGap=5
#    if(dut.validator.WaitCheckPointMatch( chkpt,timeToWait,waitGap)):
#        logger.Log("WaitCheckPointMatch -- Portuguese Success")
#    else:
#        logger.Log("WaitCheckPointMatch -- Portuguese Failued!!!")

finally: 
    #dut.Stop() 
    dut.validator.StopCaptureZapFrames()
    pass

#'''''''''''''''''''''''''END AUTOGENERATED CODE''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
