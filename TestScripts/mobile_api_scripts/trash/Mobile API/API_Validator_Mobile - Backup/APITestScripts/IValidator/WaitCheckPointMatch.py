#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_15
#Description    : Validation of WaitCheckPointMatch
# Script also includes chkpt.init API
#API Description: Validates a Checkpoint. Checkpoint validation gets executed in real-time.
#Test description: Checkpoint names are available in config file, need to check the existence
#or need to modify is testing on box other than victoria.
#Author         : Arya L
#Date           : 15 March 2018, 16 April 2018
#Script Version : 2.0
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import clr, sys, os, time, datetime

#importing user defined modules
sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL, DEFAULT_SLEEP_DELAY,\
     PERFORMANCE_TIME_TO_WAIT, DEFAULT_WAITGAP, GET_OCR_SKY_HOME_SCREEN
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.config import CheckpointScreenForTransition, waitCheckPointMatchInputDict,\
     waitCheckPointMatchTestCaseCount

except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions

APIname = "WaitCheckPointMatch"
#inputDict = {key:[testScenario, expected, checkpointName, timeToWait, waitGap] }
testCaseMax = waitCheckPointMatchTestCaseCount
exceptionOccured = False

#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the WaitCheckPointMatch API with diffrent parameters and logs its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = waitCheckPointMatchInputDict[i][0]
        expected = waitCheckPointMatchInputDict[i][1]

        checkpointName = waitCheckPointMatchInputDict[i][2]
        timeToWait = waitCheckPointMatchInputDict[i][3]
        waitGap = waitCheckPointMatchInputDict[i][4]

        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)

        #Logging input parameters
        comLib.logger.Log( " ********** Input details ********** ")
        comLib.logger.Log("checkpointName: " + str(checkpointName))
        comLib.logger.Log("timeToWait: " + str(timeToWait))
        comLib.logger.Log("waitGap: " + str(waitGap))

        #API call and duration calculation
        comLib.reachScreen(CheckpointScreenForTransition)
        #comLib.open_app()
        time.sleep(DEFAULT_SLEEP_DELAY)
        comLib.reachScreen(GET_OCR_SKY_HOME_SCREEN)
        #Testcase 1: WaitCheckPointMatch on un initialized comLib.chkpt object
        #if i != 0:
        comLib.chkpt.init(checkpointName)

        time.sleep(1)
        time1 = comLib.getTimestamp()
        APIstatus = comLib.dut.validator.WaitCheckPointMatch(comLib.chkpt, timeToWait, waitGap)
        time2 = comLib.getTimestamp()

        APIduration = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "Time taken by the API to return:  " +str (APIduration))
        comLib.dut.CommitStepResult("API: duration ", str(APIduration))
        

        if APIduration > timeToWait + 1:
            comLib.logger.Warn( "API took more than expected time to return " )
            comLib.dut.CommitStepResult("WaitCheckPointMatch API took more than expected time to return : ","failed ")
#        #Updating test case status
#        if APIstatus and APIduration <= timeToWait + 1:
#            observed = API_PASS
#            comLib.UpdateTestCaseResult(True, observed, expected)
#            comLib.dut.CommitStepResult("API: WaitCheckPointMatch ", "PASSED")
#            comLib.dut.CommitStepResult("API: Passed remarks ", "Validation True and API Returned Pass")
#        else:
#            observed = API_FAIL
#            comLib.UpdateTestCaseResult(False, observed, expected)
#            comLib.dut.CommitStepResult("API: Failed remarks ", "API Returned fail/ Validation Failed")

        if APIstatus:
            observed = API_PASS
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")
            comLib.UpdateTestCaseResult(True, observed, expected)
        else:
            observed = API_FAIL
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")
            comLib.UpdateTestCaseResult(False, observed, expected)
    except Exception as e:
         comLib.logger.Log("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        comLib.dut.validator.QuickCapture("quickCapimage_Initial")
        # Logging basic test informations
        comLib.logger.Log("################## API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        # this is a variable used to hold the Platform name
        platform = str(comLib.dut.ReadProperty(3))

        # configuring the device for automation'
        comLib.update_dut_config(platform)
        # executing precondition, making the box awake by home key press
        #launching application'
        init_app_time = comLib.open_app()
        if init_app_time > 0:
            if "Android" == platform:
                element_id = comLib.android_conf.android_APP_HOME
            else:
                element_id = comLib.ios_conf.ios_APP_HOME
            if not comLib.dut.WaitForElement(
                    comLib.MobileScriptingLibrary.Constants.ElementType.XPath, element_id, 20):
                comLib.logger.Error("WaitForElement failed for Youtube")
                testStatus = False
                sys.exit()
            else:
                comLib.logger.Log("App launched")
        else:
            comLib.logger.Error("Error in InitApp API")
            comLib.dut.CommitStepResult("Launch App: ", init_app_time)
            testStatus = False
            sys.exit() 

        #executing test caases
        comLib.dut.validator.QuickCapture("quickCapimage_BeforeAPIcall")
        for i in range( testCaseMax ):
            TestAPI(i)
        comLib.dut.validator.QuickCapture("quickCapimage_AfterAPIcall")

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         global exceptionOccured
         exceptionOccured = True
         #comLib.UpdateTestCaseResult(False, observed, )

         #if i < testCaseMax:
             #TestAPI()
    finally:
        comLib.close_app()
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END #########################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
