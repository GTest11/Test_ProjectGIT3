#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_06
#Description    : Validation of getOCRText
#API Description: Returns the text read from the specified region from the screen.
#Author         : Arya L
#Date           : 13 April 2018, 16 April 2018
#Script Version : 2.0
#Test description: Screen name in constants,GET_OCR_VICTORIA_HOME_SCREEN
# file co ordinate details and navigation logic in config file
# screenKeyRegionMapping = {"getOcrVictoriaHome":[["Home","Home"], 25, 35, 55, 55]}
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import  sys, time

#importing user defined modules
sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL, GET_OCR_VICTORIA_HOME_SCREEN, DEFAULT_FILTER, DEFAULT_LANG
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.config import getOCRTextInputDict, getOCRTextTestCaseCount

except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''
#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions
inputDict = getOCRTextInputDict

APIname = "getOCRText"
testCaseMax = getOCRTextTestCaseCount
exceptionOccured = False

#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the getOCRText  API with diffrent parameters and logs its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i, screenName):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        #screenName = screenName
        filters = inputDict[i][3]
        language = inputDict[i][4]
        #navigates to the target screen and fetches the co ordinates for ocr read
        coOrdinateList = comLib.reachScreen(screenName, True)

        testCaseName = "getOCRText_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)

        #Logging input parameters
        comLib.logger.Log( " ********** Input details ********** ")
        comLib.logger.Log("x_coordinate: " + str(coOrdinateList[0]))
        comLib.logger.Log("y_coordinate: " + str(coOrdinateList[1]))
        comLib.logger.Log("width: " + str(coOrdinateList[2]))
        comLib.logger.Log("height: " + str(coOrdinateList[3]))
        comLib.logger.Log("filters: " + str(filters))
        comLib.logger.Log("language: " + str(language))


        #API call and duration calculation
        time1 = comLib.getTimestamp()
        APIstring = comLib.dut.validator.getOCRText(coOrdinateList[0], coOrdinateList[1], coOrdinateList[2], coOrdinateList[3], filters, language)
        time2 = comLib.getTimestamp()
        APIduration = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "String obtained: " + APIstring )
        comLib.dut.CommitStepResult("String obtained ", APIstring )
        comLib.logger.Log( "Time taken by the API to return:  " + str (APIduration))
        comLib.dut.CommitStepResult("API: duration ", str (APIduration))
        

        #Updating test case status
        if APIstring != "":
            observed = API_PASS
            comLib.UpdateTestCaseResult(True, observed, expected)
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")            
        else:
            observed = API_FAIL
            comLib.UpdateTestCaseResult(False, observed, expected)
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")
    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        comLib.dut.validator.QuickCapture("quickCapimage_Initial")
        # Logging basic test informations
        comLib.logger.Log("################## API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        # this is a variable used to hold the Platform name
        platform = str(comLib.dut.ReadProperty(3))

        # configuring the device for automation'
        comLib.update_dut_config(platform)
        # executing precondition, making the box awake by home key press
        #launching application'
        init_app_time = comLib.open_app()
        if init_app_time > 0:
            if "Android" == platform:
                element_id = comLib.android_conf.android_APP_HOME
                screenName = "android_getScreen"
            else:
                screenName = "iOS_getScreen"
                element_id = comLib.ios_conf.ios_APP_HOME
            imagePath1 = comLib.dut.validator.QuickCapture("BeforeWaitforElement")
            if not comLib.dut.WaitForElement(
                    comLib.MobileScriptingLibrary.Constants.ElementType.XPath, element_id, 40):
                comLib.logger.Error("WaitforElement failed")
                testStatus = False
                sys.exit()
                global exceptionOccured
                exceptionOccured = True       
            else:
                comLib.logger.Log("App launched")
                imagePath2 = comLib.dut.validator.QuickCapture("AfterWaitforElement")
                #executing test caases
                time.sleep(30)
                comLib.dut.validator.QuickCapture("quickCapimage_BeforeAPIcall")
                for i in range( testCaseMax ):
                    TestAPI(i, screenName)
                comLib.dut.validator.QuickCapture("quickCapimage_AfterAPIcall")
        else:
            comLib.logger.Error("Error in InitApp API")
            testStatus = False
            sys.exit()
            #comLib.dut.CommitTestResult("ERROR")
            exceptionOccured = True

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         #observed = "exception"         
         exceptionOccured = True

    finally:
        comLib.close_app()
        #comLib.stop_driver()
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END #########################")
# *****************************************************************************
if __name__ == "__main__":    
    main()
# *****************************************************************************
