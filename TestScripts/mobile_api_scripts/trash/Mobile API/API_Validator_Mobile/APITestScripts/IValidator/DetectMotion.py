#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_03
#Description    : Validation of DetectMotion
#API Description: Detects motion in a specified region on the live stream.
#Author         : Arya L
#Date           : 14 March 2018, 22 March 2018
#Script Version : 2.0
#Note            : MotionScreen key actions in screenKeyRegionMapping dict needs
#to be updated before testing, after firing those keys video should be playing in the DUT
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import  sys, time

#importing user defined modules
sys.path.append('../../')

try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.config import detectMotionTestCaseCount, detectMotionInputDict
except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# User defined variables and functions
inputDict = detectMotionInputDict

APIname = "DetectMotion"
testCaseMax= detectMotionTestCaseCount
exceptionOccured = False

#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the DetectMotion API with diffrent parameters and
#logs its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        x_coordinate = inputDict[i][2]
        y_coordinate = inputDict[i][3]
        width = inputDict[i][4]
        height = inputDict[i][5]
        timeout = inputDict[i][6]
        waitGap = inputDict[i][7]
        tolerance = inputDict[i][8]

        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)

        #Logging input parameters
        comLib.logger.Log( " ********** Input details ********** ")
        comLib.logger.Log("x_coordinate: " + str(x_coordinate))
        comLib.logger.Log("y_coordinate: " + str(y_coordinate))
        comLib.logger.Log("width: " + str(width))
        comLib.logger.Log("height: " + str(height))
        comLib.logger.Log("waitGap: " + str(waitGap))
        comLib.logger.Log("timeout: " + str(timeout))
        comLib.logger.Log("tolerance: " + str(tolerance))

        #Reaching the screen or Tapping the screen to lauch the video play
        comLib.dut.Tap(500,500)   
        #comLib.reachScreen("MotionScreen")
        if i == 2:
            comLib.close_app()
            

        #API call and duration calculation
        time1 = comLib.getTimestamp()
        APIstatus = comLib.dut.validator.DetectMotion(x_coordinate, y_coordinate, width,
        height, timeout, waitGap, tolerance)
        time2 = comLib.getTimestamp()
        APIduration = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "Time taken by the API to return:  " +str (APIduration))
        comLib.dut.CommitStepResult("API: duration ", str(APIduration))
        

        if (APIstatus and (APIduration < timeout)) or (not APIstatus  and (APIduration < (timeout + 1))):
            APIreturnDurationStatus = True
            comLib.logger.Log( "API returned within the expected time. ")            
            comLib.dut.CommitStepResult("API returned within the expected time ", "PASSED")
        else:
            APIreturnDurationStatus = False
            comLib.logger.Log( "API took more than expected time to return. ")
            comLib.dut.CommitStepResult("API took more than expected time to return ", "FAILED")
        #relaunching the Testes APP after closing the APP before
        if i == 2:
            comLib.open_app()
            time.sleep(10)
        #Updating test case status
        if APIstatus and APIreturnDurationStatus:
            observed = API_PASS
            comLib.UpdateTestCaseResult(True, observed, expected)
            comLib.dut.CommitStepResult("API: DetectMotion ", "PASSED")
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")
        else:
            observed = API_FAIL
            comLib.UpdateTestCaseResult(False, observed, expected)
            comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")

    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True

# ******************************************************************************
def main():
    try:
        # Logging basic test informations
        comLib.logger.Log("################## API VALIDATION START #############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        # this is a variable used to hold the Platform name
        platform = str(comLib.dut.ReadProperty(3))

        # configuring the device for automation'
        comLib.update_dut_config(platform)
        # executing precondition, making the box awake by home key press
        #launching application'
        init_app_time = comLib.open_app()
        if init_app_time > 0:
            if "Android" == platform:
                element_id = comLib.android_conf.android_APP_HOME
            else:
                element_id = comLib.ios_conf.ios_APP_HOME
            if not comLib.dut.WaitForElement(
                    comLib.MobileScriptingLibrary.Constants.ElementType.XPath, element_id, 20):
                comLib.logger.Error("Waitfor element failed for Youtube")
                testStatus = False
                sys.exit()
            else:
                comLib.logger.Log("App launched")
        else:
            comLib.logger.Error("Error in InitApp API")
            testStatus = False
            sys.exit()

        #executing test caases
        for i in range( testCaseMax ):
            TestAPI(i)

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         global exceptionOccured
         exceptionOccured = True

    finally:
        comLib.close_app()
        comLib.stop_driver()    
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END ###################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
