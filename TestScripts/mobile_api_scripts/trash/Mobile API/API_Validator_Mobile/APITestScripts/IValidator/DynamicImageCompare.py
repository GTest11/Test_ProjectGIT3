#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_03
#Description    : Validation of DynamicImageCompare
#API Description: Does comparison between image from video source and reference
#image obtained using CacheImageFromUrl API
#Author         : Arya L
#Date           : 13 March 2018, 16 April 2018
#Script Version : 2.0
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#ipmorting python modules
import sys

#importing user defined modules

sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL, CAP_IMAGE_NAME, CAP_DEFAULT_QUALITY
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    sys.exit()

try:
    from configuration.coordinates import Capt_x, Capt_y, Capt_width, Capt_height
except ImportError:
    comLib.logger.Warn("Failed to import coordinates file")
    sys.exit()

try:
    from configuration.config import dynamicImageCompareTestCaseCount, dynamicImageCompareInputDict
except ImportError:
    comLib.logger.Warn("Failed to import config file")
    sys.exit()

#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''
#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions
inputDict = dynamicImageCompareInputDict

APIname = "DynamicImageCompare"
testCaseMax= dynamicImageCompareTestCaseCount
exceptionOccured = False
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the CacheImageFromUrl API with diffrent parameters and logs its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        x_coordinate = inputDict[i][2]
        y_coordinate = inputDict[i][3]
        width = inputDict[i][4]
        height = inputDict[i][5]
        tolerance = inputDict[i][6]
        referenceImageName = "cachedImageName"

        imagePath = comLib.dut.validator.CaptureImage(Capt_x, Capt_y, Capt_width,
        Capt_height, CAP_IMAGE_NAME, CAP_DEFAULT_QUALITY, 0)
        #if (comLib.dut.validator.CacheImageFromUrl(imagePath,referenceImageName)):
        if (1):  
            comLib.dut.validator.CacheImageFromUrl(imagePath,referenceImageName)
            if (i == 3):
                referenceImageName = "DummyImageName"

            testCaseName = APIname + "_" + str(i)
            #Logging test case details
            comLib.logger.Log( "TestCase:  " +str (testCaseName))
            comLib.dut.CommitStepResult("TestCase", testCaseName)
            comLib.logger.Log( "Test scenario:  " +str (testScenario))
            comLib.dut.CommitStepResult("Test Scenario", testScenario)

            #Logging input parameters
            comLib.logger.Log( " ********** Input details ********** ")
            comLib.logger.Log("referenceImageName: " + str(referenceImageName))
            comLib.logger.Log("x_coordinate: " + str(x_coordinate))
            comLib.logger.Log("y_coordinate: " + str(y_coordinate))
            comLib.logger.Log("width: " + str(width))
            comLib.logger.Log("height: " + str(height))
            comLib.logger.Log("tolerance: " + str(tolerance))


            #API call and duration calculation
            time1 = comLib.getTimestamp()
            APIstatus = comLib.dut.validator.DynamicImageCompare(referenceImageName,
            x_coordinate,y_coordinate,width,height,tolerance)
            time2 = comLib.getTimestamp()
            APIduration = comLib.getAPIduration(time1, time2)
            comLib.logger.Log( "Time taken by the API to return:  " +str (APIduration))
            comLib.dut.CommitStepResult("API: duration ", str(APIduration))
            

            #Updating test case status
            if APIstatus:
                observed = API_PASS
                comLib.UpdateTestCaseResult(True, observed, expected)
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Passed")                
            else:
                observed = API_FAIL
                comLib.UpdateTestCaseResult(False, observed, expected)
                comLib.dut.CommitStepResult("API: Test case" + str(testCaseName), "Failed")
        else:
            comLib.logger.Log("Unable to cache the url for DynamicImageCompare")
            comLib.UpdateTestCaseResult(False, "pre condition failed", expected)
    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        # Logging basic test informations
        comLib.logger.Log("################## API VALIDATION START ############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        # this is a variable used to hold the Platform name
        platform = str(comLib.dut.ReadProperty(3))

        # configuring the device for automation'
        comLib.update_dut_config(platform)
        # executing precondition, making the box awake by home key press
        #launching application'
        init_app_time = comLib.open_app()
        if init_app_time > 0:
            if "Android" == platform:
                element_id = comLib.android_conf.android_APP_HOME
            else:
                element_id = comLib.ios_conf.ios_APP_HOME
            if not comLib.dut.WaitForElement(
                    comLib.MobileScriptingLibrary.Constants.ElementType.XPath, element_id, 30):
                comLib.logger.Error("Waitfor Element failed for YouTube App")
                testStatus = False
                sys.exit()
            else:
                comLib.logger.Log("App launched")
        else:
            comLib.logger.Error("Error in InitApp API")
            testStatus = False
            sys.exit()

        #executing test caases
        for i in range( testCaseMax ):
            TestAPI(i)

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))         
         global exceptionOccured
         exceptionOccured = True
    finally:
        comLib.close_app()
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END ##################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
