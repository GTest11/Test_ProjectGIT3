#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#TestScript ID  : FE_STB_API_VAL_08_12
#Description    : Validation of GetServerTimeStamp and QuickCapture
#TurnOnDUT AND TurnOffDUT Also used in this script
#API Description:
#GetServerTimeStamp: Displays a time stamp from the server
#QuickCapture : Captures a screen-shot of the video source and returns its path
#Author         : Arya L
#Date           : 14 March 2018, 16 April 2018
#Script Version : 2.0
#Pending: needs to check the API status logic
#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY''''''''''''''''''''
import clr, sys, os, time, datetime

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''
sys.path.append('../../')
try:
    # Import library file
    import library.commonFunctions as comLib
except ImportError:
    print("Failed to import commonFunctions file")
    sys.exit()

try:
    from configuration.constants import BUILD_NO, API_PASS, API_FAIL, DEFAULT_KEY_FIRE_TIME_OUT, DEFAULT_WAIT_DELAY
except ImportError:
    comLib.logger.Warn("Failed to import constants file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

try:
    from configuration.config import serverTime_QuickCaptureInputDict, serverTime_QuickCaptureTestCaseCount

except ImportError:
    comLib.logger.Warn("Failed to import config file")
    comLib.dut.CommitTestResult("ABORTED")
    sys.exit()

#'''''''''''''''''''''''''END AUTOGENERATED CODE'''''''''''''''''''''''''''
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Use defined variables and functions
global inputDict

APIname = "GetServerTimeStamp and QuickCapture"
testCaseMax= serverTime_QuickCaptureTestCaseCount
exceptionOccured = False


#inputDict = {key:[testScenario, expected, x_coordinate, y_coordinate, width, height, timeout, waitGap, tolerance] }
inputDict = serverTime_QuickCaptureInputDict
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#@Function Name	  	: TestAPI()
#@Description		: Tests the CacheImageFromUrl API with diffrent parameters and logs its response (status, duration)
#@Input arguments	: Iteration count
#@Output values		: Null
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
def TestAPI(i):
    try:
        # Getting inputs from global dict
        testScenario = inputDict[i][0]
        expected = inputDict[i][1]

        imageName = inputDict[i][2]

        testCaseName = APIname + "_" + str(i)

        #Logging test case details
        comLib.logger.Log( "TestCase:  " +str (testCaseName))
        comLib.dut.CommitStepResult("TestCase", testCaseName)
        comLib.logger.Log( "Test scenario:  " +str (testScenario))
        comLib.dut.CommitStepResult("Test Scenario", testScenario)


        time1 = comLib.getTimestamp()
        APIstatus = comLib.dut.validator.GetServerTimeStamp()
        time2 = comLib.getTimestamp()
        APIdurationGetServerTimeStamp = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "Time taken by the GetServerTimeStamp to return:  " +str (APIdurationGetServerTimeStamp))
        comLib.dut.CommitStepResult("API: GetServerTimeStamp duration ", str(APIdurationGetServerTimeStamp))
        if APIstatus:
            comLib.dut.CommitStepResult("API: GetServerTimeStamp", "Passed")
            comLib.logger.Log("GetServerTimeStamp API passed")
        else:
            comLib.dut.CommitStepResult("API: GetServerTimeStamp", "Failed")
            comLib.logger.Log("GetServerTimeStamp API failed")
        


        #Logging input parameters
        comLib.logger.Log( " ********** Input details of QuickCapture ********** ")
        comLib.logger.Log("imageName: " + str(imageName))

        #trying to power off the DUT
        #if i == 2:
        #    comLib.dut.TurnOffDUT(DEFAULT_WAIT_DELAY)
             

        #API call and duration calculation
        time1 = comLib.getTimestamp()
        imagePath = comLib.dut.validator.QuickCapture(imageName)
        time2 = comLib.getTimestamp()
        APIduration = comLib.getAPIduration(time1, time2)
        comLib.logger.Log( "Time taken by the QuickCapture to return:  " +str (APIduration))
        comLib.dut.CommitStepResult("API: duration ", str(APIduration))
        

        #if i == 2:
        #    comLib.dut.TurnOnDUT(DEFAULT_WAIT_DELAY)

        #Updating test case status
        if imagePath != "":
            observed = API_PASS
            comLib.UpdateTestCaseResult(True, observed, expected)
            comLib.dut.CommitStepResult("API: QuickCapture ", "PASSED")
            comLib.dut.CommitStepResult("API: Passed remarks ", "Validation True and API Returned Pass")
        else:
            observed = API_FAIL
            comLib.UpdateTestCaseResult(False, observed, expected)
            comLib.dut.CommitStepResult("API: Failed remarks ", "API Returned fail/ Validation Failed")
    except Exception as e:
         comLib.logger.Error("Exception thrown by python from TestAPI: " + str(e))
         global exceptionOccured
         exceptionOccured = True


# ******************************************************************************
def main():
    try:
        # Logging basic test informations
        comLib.logger.Log("################## API VALIDATION START ###############")
        comLib.logger.Log("Build Number: " + BUILD_NO)
        comLib.logger.Log("API under test: " + str(APIname))
        comLib.dut.CommitStepResult("Build Number  : ", BUILD_NO)
        comLib.dut.CommitStepResult("API: ", APIname)

        # this is a variable used to hold the Platform name
        platform = str(comLib.dut.ReadProperty(3))

        # configuring the device for automation'
        comLib.update_dut_config(platform)
        # executing precondition, making the box awake by home key press
        #launching application'
        init_app_time = comLib.open_app()
        if init_app_time > 0:
            if "Android" == platform:
                element_id = comLib.android_conf.android_APP_HOME
            else:
                element_id = comLib.ios_conf.ios_APP_HOME
            if not comLib.dut.WaitForElement(
                    comLib.MobileScriptingLibrary.Constants.ElementType.XPath, element_id, 20):
                comLib.logger.Error("WaitforElement Failed for YouTube")
                testStatus = False
                sys.exit()
            else:
                comLib.logger.Log("App launched")
        else:
            comLib.logger.Error("Error in InitApp API")
            testStatus = False
            sys.exit()
        #comLib.dut.controller.sendCommandSequence("Home,Exit,Home", DEFAULT_KEY_FIRE_TIME_OUT)

        #executing test cases
        for i in range( testCaseMax ):
            TestAPI(i)

    except Exception as e:
         comLib.logger.Warn("Exception raised in main function.")
         comLib.logger.Error("Exception thrown by python : " + str(e))
         observed = "exception"
         global exceptionOccured
         exceptionOccured = True

    finally:
        comLib.close_app()
        #Updating script status
        if exceptionOccured:
            comLib.dut.CommitTestResult("ERROR")
        else:
            comLib.UpdateTestScriptResult()
        comLib.logger.Log("################ TEST SCRIPT END #########################")
# *****************************************************************************
if __name__ == "__main__":
    main()
# *****************************************************************************
