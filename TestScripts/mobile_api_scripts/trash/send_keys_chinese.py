# -*- coding: utf-8 -*- 
#'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
#TestCase ID: 
#Description: 
#Author: 
#Date: 
#Version: 

#''''''''''''''''''''AUTOGENERATED CODE - DO NOT MODIFY'''''''''''''''''''' 

import clr,sys,os,time 
clr.AddReference("MobileScriptingLibrary") 
import MobileScriptingLibrary 
dut = MobileScriptingLibrary.MobileDUT() 
logger = MobileScriptingLibrary.Logger() 
chkpt = MobileScriptingLibrary.CheckPoint() 
config = MobileScriptingLibrary.DeviceConfig() 

#''''''''''''''''''''''''''''''''IMPORTS''''''''''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''END IMPORTS''''''''''''''''''''''''''''''''' 

#''''''''''''''''''''''''''''''FOR iOS DEVICE'''''''''''''''''''''''''''''' 
#config.DeviceType = "iOS" 
#config.AppName = "com.google.ios.youtube" 


#''''''''''''''''''''''''''''FOR ANDROID DEVICE'''''''''''''''''''''''''''' 
config.DeviceType = "Android" 
config.AppPackage = "com.google.android.youtube" 
config.AppActivity = ".HomeActivity" 

args = sys.argv 
scriptPath = os.path.realpath(__file__) 
dut.Configure(args[1],args[2],args[3],args[4],scriptPath) 
logger.Configure(args[1],args[2],args[3],args[4],scriptPath) 
       
try: 
    if(dut.InitApp(config)): 
        logger.Log("App launched.") 
    
    search_access_id = 'Search'
    search_id = 'com.google.android.youtube:id/search_edit_text'
    ms1 = time.time()*1000.0
    ret = dut.Click(MobileScriptingLibrary.Constants.ElementType.AccessibilityID, search_access_id)
    ms2 = time.time()*1000.0

#    logger.Log("Time taken for Click API is >>>> "+str(ms2-ms1))
#    logger.Log("Ret value of the API is >>>> "+str(ret))

    time.sleep(2)
#    ms1 = time.time()*1000.0
#    ret = dut.SendKeys(MobileScriptingLibrary.Constants.ElementType.Id, search_id, "Popular Chinese words")
#    ms2 = time.time()*1000.0

#    logger.Log("Time taken for SendKeys API is >>>> "+str(ms2-ms1))
#    logger.Log("Ret value of the API is >>>> "+str(ret))
    dut.Tap(308, 650)
    time.sleep(4)
#    ret = dut.Swipe(250, 1250, 250, 5)
#    time.sleep(2)
#    ret = dut.Swipe(250, 1250, 250, 5)
    time.sleep(4)

#WaitOCRMatch
#    logger.Log("======================================================")
#    logger.Log("WaitOCRMatch")
#    logger.Log("======================================================")
#    refText="儡十么时候"
#    x_coordinate=132
#    y_coordinate=693
#    width=122
#    height=42
#    timeToWait=20
#    waitGap=5
#    language="chi_sim"
#    #filters = "Greyscale;Contrast:6"
#    filters=""
#    compType= 1
#    accuracy= 92
#    
#    dut.validator.StopCaptureZapFrames()
#    if(dut.validator.StartCaptureZapFrames(30)):
#        matchTime = dut.validator.WaitOCRMatch(refText,x_coordinate, y_coordinate, width, height,timeToWait,waitGap,language,filters,compType,accuracy)
#        if(matchTime > -1):
#            logger.Log("Chinese ---- Test case passed")
#            dut.CommitTestResult("Passed")
#        else:
#            logger.Log("Chinese ---- Test case failed")
#            dut.CommitTestResult("Failed")
#        dut.validator.StopCaptureZapFrames()
#    else:
#        logger.Log("Unable to start frame capture")

## WaitForCheckpoint
#    logger.Log("======================================================")
#    logger.Log("WaitForCheckpoint")
#    logger.Log("======================================================")
#    checkpoints = ['lr_test_chinese_text', 'lr_chinese_mult_filter']
#    for checkpoint in checkpoints:
#        checkpName=checkpoint
#        timeToWait = 40
#        initialDelay = 1 #should be >=0
#        time.sleep(5)
#        if(dut.validator.StartCaptureZapFrames(30)):
#            out_time = dut.validator.WaitForCheckpoint(checkpName, timeToWait, initialDelay)
#            logger.Log("WaitForCheckpoint(Chinese) ---- time:" + str(out_time))
#            if(out_time > -1):
#                logger.Log("WaitForCheckpoint(Chinese) passed")
#            else:
#                logger.Log("WaitForCheckpoint(Chinese) failed")
#            dut.validator.StopCaptureZapFrames()
#        else:
#            logger.Log("Unable to start frame capture")



#getOCRText
#    x_coordinate=191
#    y_coordinate=697
#    width=58
#    height=32
#    #filters = "Greyscale;Contrast:98"
#    filters = ''
#    language = "chi_sim"
#    ocr_output = dut.validator.getOCRText(x_coordinate, y_coordinate, width, height, filters, language)
#    logger.Log("getOCRText(Chinese) output string : " + ocr_output)
#    if ocr_output == '时候':
#        logger.Log("getOCRText(Chinese) Passed!!!")
#    else:
#        logger.Log("getOCRText(Chinese) Failed!!!")


# validateCheckPoint
    logger.Log("======================================================")
    logger.Log("ValidateCheckPoint")
    logger.Log("======================================================")
    checkpoints = ['lr_test_chinese_text', 'lr_chinese_mult_filter_1']
    for i in range(10):
        for checkpoint in checkpoints:
            checkp = checkpoint
            chkpt.init(checkp)
            if(dut.validator.validateCheckPoint((chkpt))):
                logger.Log("ValidateCheckPoint(Chinese) ---- Passed")
            else:
                logger.Log("ValidateCheckPoint(Chinese) ---- Failed")
    
# WaitCheckPointMatch
#    checkpoints = ['lr_test_chinese_text', 'lr_chinese_mult_filter_1']
#    for checkpoint in checkpoints:
#        checkpName = checkpoint
#        chkpt.init(checkpName)
#        timeToWait=30
#        waitGap=5
#        if(dut.validator.WaitCheckPointMatch( chkpt,timeToWait,waitGap)):
#            logger.Log("WaitCheckPointMatch -- Chinese Success")
#        else:
#            logger.Log("WaitCheckPointMatch -- Chinese Failued!!!")

finally: 
    #dut.Stop() 
    dut.validator.StopCaptureZapFrames()
    pass

#'''''''''''''''''''''''''END AUTOGENERATED CODE''''''''''''''''''''''''''' 
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
